/* channel.h
 * Channel class
 *
 * Copyright (c) 2001,2002 AustHex Development Team 
 * (See DEV-TEAM file for details)
 *
 * This file is a part of AustHex.
 * 
 * AustHex is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AustHex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AustHex; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __CHANNEL_H_
# define __CHANNEL_H_

# include <ctime>

# ifdef STL_HAS_HASH
#  include <hash_map>
# else
#  include <map>
# endif

# ifdef STL_HAS_SLIST
#  include <slist>
# else
#  include <list>
# endif

// Channel types we support for the ISUPPORT line.
# define CHANNEL_TYPES			"&#+!"

class Channel;
class ChannelMember;

# include "str.h"
# include "user.h"
# include "handler.h"


// A channel member class
class ChannelMember {
 public:
   // Do not change this - P14 needs this to be the same
   typedef unsigned short modes_t;

// private:
 public:
   User *user;					// Link into user record
   modes_t modes;				// User modes on channel

 public:
   /* Channel member modes...
    * WARNING!! Do not change these once they are set! P14 relies on them
    * being constant over ALL servers!
    */
   static modes_t const M_CREATOR		= 0x0001; // +O
   static modes_t const M_OPPED			= 0x0002; // +o
   static modes_t const M_VOICED		= 0x0004; // +v
   static modes_t const M_HALFOPPED		= 0x0008; // +h

   // Constructors
   ChannelMember(void)
     : user(0),
       modes(0)
     {};
   
   ChannelMember(User *u, modes_t m = 0)
     : user(u),
       modes(m)
     {};
   
   // Variable access
   User *getUser(void) const {
      return user;
   };
   
   modes_t getModes(void) const {
      return modes;
   };
   
   // Mode macros
   bool isModeSet(modes_t mode) const {
      return (modes & mode);
   };
   
   bool isPrivileged(void) const {			// Full/HalfOp/Voiced?
      return ((modes & M_OPPED) ||
	      (modes & M_HALFOPPED) ||
	      (modes & M_VOICED));
   };
   
   bool isChanOper(void) const {			// Full/Half chan oper?
      return ((modes & M_OPPED) ||
	      (modes & M_HALFOPPED));
   };
   
   bool isFullChanOper(void) const {			// Full chan oper?
      return (modes & M_OPPED);
   };
   
   friend class Channel;
};


// A channel mask (+b/+d/+e/+I etc)
class ChannelMask {
 private:
   StringMask mask;				// The actual mask
   String whoset;				// Nick/server who set this
   time_t whenset;				// Time this was set

 public:
   // Constructors
   ChannelMask(StringMask sm, String const &who, time_t when)
     : mask(sm),
       whoset(who),
       whenset(when)
     {};
   
   // Variable access
   StringMask getMask(void) const {
      return mask;
   };
   
   String getWhoset(void) const {
      return whoset;
   };
   
   time_t getWhenset(void) const {
      return whenset;
   };
   
   friend class Channel;
};


// THE channel class
class Channel {
 public:
# ifdef STL_HAS_HASH
   typedef std::hash_map <String, ChannelMember *> member_map_t;
# else
   typedef std::map <String, ChannelMember *> member_map_t;
# endif

# ifdef STL_HAS_SLIST
   typedef std::slist <ChannelMask *> mask_list_t;
# else
   typedef std::list <ChannelMask *> mask_list_t;
# endif

   // Channel mode type - do not change this - P14 needs this to be the same
   typedef unsigned long long modes_t;

// private:
 public:
   struct modeTableStruct {
      char letter;			// Letter of this mode
      modes_t flag;			// Flag used in bit-wise operations
      bool hasParamOn;			// Requires a parameter to set?
      bool hasParamOff;			// Requires a parameter to unset?
      bool userToggle;			// Can users toggle this mode?
      bool (*toggler)(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);	// Function to toggle this mode
   };
   static struct modeTableStruct const modeTable[];

   String name;				// Name of the channel + prefix
   modes_t modes;				// Channel mode flags
   time_t creationTime;				// Time channel was created

   String topic;				// Channel topic
   String topicWho;				// Who set this topic
   time_t topicTime;				// When was this topic set
   
   String key;					// Channel key, blank for none
   unsigned long limit;				// Member limit, 0 for none

   mask_list_t bans;				// Ban list
   mask_list_t exceptions;			// Ban exceptions list
   mask_list_t invites;				// Invite allowance list

   member_map_t members;			// List of channel members

   // Channel mode change routines
   static bool toggleModeANONYMOUS(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeBAN(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeBANEXCEPT(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeCHANCREATOR(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeCHANOPER(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeDENY(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeEVENT(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeHALFOPER(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeINVITE(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeINVITEALLOW(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeKEY(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeLIMIT(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeMODERATED(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeNOOUTSIDEMSG(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModePRIVATE(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeQUIET(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeREGNICKSONLY(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeREOP(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeSECRET(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeTOPICLOCK(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);
   static bool toggleModeVOICE(bool setting, Handler *handler, Channel *channel, ChannelMember *member, String *setter, String *param);

 public:
   /* Channel modes (note modes that use paramters are not listed here)
    * WARNING!! Do not change these once they are set! P14 relies on them
    * being constant over ALL servers!
    */
   static modes_t const M_INVITE		= 0x0000000000000001; // +i
   static modes_t const M_MODERATED		= 0x0000000000000002; // +m
   static modes_t const M_NOOUTSIDEMSG		= 0x0000000000000004; // +n
   static modes_t const M_TOPICLOCK		= 0x0000000000000008; // +t
   static modes_t const M_PRIVATE		= 0x0000000000000010; // +p
   static modes_t const M_SECRET		= 0x0000000000000020; // +s
   static modes_t const M_QUIET			= 0x0000000000000040; // +q
   static modes_t const M_ANONYMOUS		= 0x0000000000000080; // +a
   static modes_t const M_EVENT			= 0x0000000000000100; // +E
   static modes_t const M_REOP			= 0x0000000000000200; // +r
   static modes_t const M_REGNICKSONLY		= 0x0000000000000400; // +R

   // Channel mode stuff
   static char const *modeStr;			// Chars of modes
   static char const *modeParamStr;		// Chars of modes with params
   static char const *prefixStr;		// Modes vs Prefixes (ISUPPORT)

   // Constructor
   Channel(String const &n, time_t ct)
     : name(n),
       modes(0),
       creationTime(ct),
       topic(""),
       topicWho(""),
       topicTime(0),
       key(""),
       limit(0)
     {
	bans.clear();
	exceptions.clear();
	invites.clear();
	members.clear();
     };

   ~Channel(void);   				// Destructor

   // Variable access
   String getName(void) const {			// Grab the name of the channel
      return name;
   };
   
   modes_t getModes(void) const {		// Grab the modes
      return modes;
   };
   
   bool isModeSet(modes_t mode) const {		// Is the given mode set?
      return (modes & mode);
   };

   // Access checking
   bool isHidden(void) const {
      return ((modes & M_PRIVATE) ||
	      (modes & M_SECRET));
   };
   
   ChannelMember *getMember(User *);		// Grab a channel member record
   
   // Blunt check, is this name a channel name? (check first char)
   static bool isChannel(String const &channel) {
      switch (channel[0]) {
       case '#':
       case '&':
       case '+':
       case '!':
	 return true;
      }
      return false;
   };
   
   static bool okName(String const &);		// Ok channel name?

   void processModes(Handler *, User *, 
		     String &, StringTokens *); // Process a MODE change
   
   bool onBan(User *);				// Is a user banned
   bool onBanExcept(User *);			// Is a user ban excepted
   bool onInvite(User *);			// Is a user 'auto-invited'
   
   void sendNotice(User *, String const &);	// Send a NOTICE to this chan
   void sendPrivmsg(User *, String const &);	// Send a PRIVMSG to this chan
   
   void sendKnock(User *, String const &);	// Send a KNOCK request
   
   static String makeModes(Channel *);		// Make a + channel mode string
};

#endif

