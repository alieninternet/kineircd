# $Id$
# Example configuratio file for KineIRCd
# 
# As you can see, this is very 'C' styled, similar to many configuration
# files around these days (bind etc).
#
# Comments can be C style (/* comment */), C++ style (// comment) or
# UNIX style (# comment). If you need to write something which included
# something which may look like a comment such as a channel name, encase it
# within quotes (", ' or `), such as "#channel". Note that the type of quote
# you use must remain consistant for that quote, such as "foo" 'bah', however
# "foo' is invalid.
#
# Values will need to be enclosed within quotes if they include a space, else
# only the first portion or word of a value may be used.
#
# Each class must be enclosed within a pair of parenthesis ('{' and '}').
# Definitions may be of the form "variable = value" or "variable value",
# whichever suits you at the time, or whichever looks neater. Each definition
# MUST be terminated by a semi-colon (';'), however this is optional for
# classes.
#
# This variety of styles is intentional to allow you to use various friendly
# configuration tools which have some (or all) of these capabilities.
#
# For more information, see the ircd.conf(5) man page, as the comments in this
# file often will not explain every detail as explicitly as the documentation
# will.
#
# This file uses a variety of comment, quote and definition styles on purpose
# to show how they can be used.
#
# You must edit this to suit your server!!!
#

/* The main options class. This is where the most important core configuration
 * of the server is kept
 */
options {
   // Location of the MOTD file
   motdfile = ircd.motd;
   
   // This is the host name of your server
   serverName = kine.dev.intranet;
   
   // This description appears in /whois messages, server listings etc.
   description="\037KineIRCd\037 \002Development Server\002";
   
   // Setting this will hide your server from users
//   hidden;
   
   /* Our chroot (change-root) gaol location. WARNING!! Do not set this unless
    * you have read all the documentation (doc/Security) on how to do so. All 
    * file locations in this file WILL have to be refereced under this 
    * directory as if it were /. 
    */
//   chroot = /chroot/ircd;

   /* These variables (chuser and chgroup) define user/group (or uid/gid's) to
    * switch to after the configuraton has loaded. All files beyond this point
    * will need to be accessible with the server running under the given
    * user/group, or they will not be able to be loaded.
    */
//   chuser = nobody;
//   chgroup = nobody;

   /* If you want to write a pid file, here is how. Comment this out or use
    * "pidFile;" if you wish to disable it..
    */
   pidFile = "./ircd.pid";
   
   /* Define limits on things. These should comply with network-wide settings.
    * The use of large numbers here may result in cropped fields in some 
    * protocols.
    */
   limits {
      // Limits for channels
      channels {
         // Maximum number of ban masks set at once per channel
         maxBans = 50;
      
         // Maximum number of ban exception masks set at once per channel
         maxBanExceptions = 50;
       
         // Maximum number of invite-only exception masks set at once per channel
         maxInviteExceptions = 50;
     
         // Maximum length of a channel name
         maxNameLength = 40;
       
         // Maximum length of a channel's topic
         maxTopicLength = 300;
      };

      // Limits for users
      users {
         // Maximum number of accepts per user
         maxAccepts = 100;
    
         /* Maximum number of channels a user can be in at once. This does not 
          * apply to authenticated operators
          */
         maxChannels = 10;
    
         // Maximum languages set at once per user
         maxLanguages = 6;
      
         // Maximum length of a nickname
         maxNickNameLength = 15;
    
         // Maximum length of the realname/GECOS field for users
         maxRealNameLength = 50;
    
         // Maximum number of silences per user
         maxSilences = 20;
      
         // Maximum number of nickname/channel/server watches per user
         maxWatches = 128;
      };

      // Maximum length of a KICK command's reason
      maxKickReasonLength = 300;

      // Maximum length of a message (NOTICE/PRIVMSG payload size)
      maxMessageLength = 400;

      /* Maximum number of targets possible to be specified for PRIVMSG,
       * NOTICE, CTCP/ME (in IRC-3) etc.
       */
      maxTargets = 4;

      /* Minimum length of a broadcasted message (WALLOPS, PRIVMSG broadcasts
       * etc). This is designed to avoid abuse, or accidental broadcasts of 
       * incomplete messages, as they are considered "expensive" bandwidth 
       * wise. Set to '0' to remove the limit.
       */
      minBroadcastLength = 20;
   };
   
   /* Normally, when servers, services, clients and irc networks connect to
    * your server they are presented with the traditional IRC registrar, which
    * accepts their connection and attempts to determine what type of
    * connection it is receiving, and what protocol it should throw the
    * connection over to. This configuration section determines how the
    * registrar responds to connections
    */
   registrar {
      /* For validity checking, clients connecting can be probed to see if
       * they are cheap scripts or real clients by sending a PING with random
       * data attached. This can ween out many unwanted connections. Since
       * many IRC servers do this PING, many scripts are ready for it, so you
       * can probe many more times than just once here, if necessary. Comment
       * this out, or set this to 0 (none) if you do not want to ping
       * connecting clients prior to registration.
       */
      clientPingProbeCount = 1;
   }
};


# Our logging class. This defines where we will log information, and what we
# should and shouldn't log.
logging {
   
}


# The Administrator section defines information about the person or
# organisation that administrates this server. Everything here is required
# except the admnistrator's location.
administrator {
   name =
      "Simon Butcher";
   location =
      "Server located in Melbourne, Australia";
   email =
      "Email - pickle@alien.net.au";
}


# The languages section defines files we need to load to obtain language data.
# The list is ordered from most preferred to least preferred, with the first
# language being the default language for all output.
languages {
   // Load the english file
   lang/en.lang;
}


# The SSL section specifically defines configuration data specific to 
# 'IRCS' - that is IRC through a Secure Socket Layer. Note that it is not
# the encryption of traffic which creates large amounts of CPU usage but rather
# the key verification which occurs upon the connection of an SSL socket. This
# common misconception comes from servers which use stateless connections such
# as HTTP where connections are initiated per request, or for a batch of
# requests.
#
# This section is totally ignored if SSL support is not compiled in to your
# server.
ssl {
   /* This is the full path and filename of the certificate file that
    * identifies this server. This certificate must be generated off the
    * master certificate of the network if you want to connect to other
    * servers via SSL, and must be kept secure!
    *
    * For those technically interested, the type of the certificate should be
    * 'PEM' (Base64 Privacy Enhanced Mail encoded certificate) because it
    * seems to be the 'preferred' format, and is easier to transport.
    */
   certificate = "mothership.cert";
}


# The operators class defines who you allow as operators on your server,
# where they are allowed to connect and identify themselves from, their
# passwords, and a name or description.
#
# Be aware that if the network you are connecting to employs a server doing
# Centralised Operator Management, these entries then may be disabled upon
# linking the server to the network, depending on the validity of the entries.
# This isn't a bad thing, as the disabled entries are always enabled if the
# server is an island (such as totally delinked), which can allow for your own
# entries which can control the server should something happen (such as
# relinking it to the network), without them having to have direct access to
# the network.
# 
# Also note that upon linking to the network the operator list may grow in
# such a situation to include operators not mentioned here as the network-wide
# operator list is proliferated over the network.
operators {
   pickle {
      Name = "Simon (\"pickle\")";
      password = "0TqOz>1Es?NF0nh#*+0VeL]D00&U]r";
      type = global;
      
      hosts {
         172.16.2.0/24;
	 *.alien.intranet;
      }
   }
   
   sl7 {
      name = Steve;
      type = global;
      
      password = "16c~y50|<vD#1N7Udb0i~z~)0zq9hj";
      
      hosts {
         *;
      }
   }
}


# Our main ports, ircu style (6665-6669). Note that this will bind to ALL of
# those ports in that range - handy for one definition. Just in case we also
# accept server, service, and network (IIRC) connections here. 
listen ipv4 {
   /* The port to listen on. This can be in various formats, such as a
    * decimal number (eg. 194), an octal number (eg. 0302), a hexadecimal
    * number (eg. 0xC2) or a name which can be looked up ('ircu'), however
    * Kine only knows how to look up names for IPv4 and IPv6 sockets.
    */
   port = ircu;
   
   // Whether this port should be secured (eg. SSL)
   secure = false;
   
   // What we allow
   allowUsers = true;
   allowServices = true;
   allowServers = true;
   allowNetworks = true;
   
   /* This refers to how many sockets are allowed to be waiting in the 
    * 'listen backlog' for a listening socket prior to their connection at
    * the kernel level. Read listen(3) (type "man 3 listen") for more
    * information on what this means on a more technical level as it's beyond
    * the scope of the example configuration!
    */
   listenBacklog = 500;
}

# The same as above, but using IPv6. Note that IPv6 uses the same port space
# as IPv4, and therefore you cannot have IPv4 and IPv6 sockets using the same
# port on the same interface. However, if you can use the IPv6 sockets then
# IPv4 sockets will automatically be mapped to the same port.
#listen ipv6 {
#   port = ircu;
#   allowUsers = true;
#   allowServices = true;
#   allowServers = true;
#   allowNetworks = true;
#}

# The standard IRC port, however it requires root access as it is a port
# within the well-known-services range (first 1024 ports).
#listen ipv4 {
#   port = irc;
#   allowUsers = true;
#   allowServices = true;
#   allowNetworks = true;
#}

# The standard server port
#listen ipv4 {
#   port = irc-serv;
#   allowServers = true;
#   allowNetworks = true;
#}

# A port open conveniently for those trying to connect to IRC through tight
# firewalls via a proxy
#listen ipv4 {
#   port = http-alt;
#   secure = false;
#   allowUsers = true;
#}

# Listen on a unix socket for users only
#listen unix {
#   address = "/tmp/ircd.sock";
#   allowUsers = true;
#}

# Listen on an IPX/SPX socket for users only
#listen ipx {
#   port = 0x6667; // This port is unofficial
#   allowUsers = true;
#}


# The DENY class defines access restrictions to certain objects. 
# These also include the original 'k-lines' which are now 'denied hosts'. 
# Hey, it's the 21st century, we can be a little more descriptive :)
#
# The format is simple, each type of prohibited object has its own sub-class
# of variable assignments in which the variable name is the name or mask of
# the object being banned, and the text being assigned to the variable is
# the reason why this object is unavaiable.
#
# Note: Prohibited objects are checked AFTER checking for redirections on
# objects, so if you redirected +ASD for example to #ASD, the prohibited
# channel '+ASD' would no longer mean anything and just be a waste of space.
deny {
   /* Invalid nicknames, adapted from the original ircd.conf. Operators and
    * helpers (+o/+O/+h) are allowed to bypass this restriction.
    */
   nicknames {
      // Stop people playing pranks :)
      anonymous		"This is used on anonymous (+a) channels";
      *oper*		"You're not an IRC operator!";
   }
   
   /* Invalid channel names. These channels cannot be created, but if they do
    * exist they can be joined. Use wisely, and sparingly. An alternative is
    * to use channel redirections (see below).
    *
    * People with either of the helper or operator modes (+o, +O, or +h) are
    * allowed to bypass these channel restrictions to be able do their job.
    */
   channels {
      +chaty		"Reserved for pickle ;)";
      &chaty		"Reserved for pickle ;)";
      !chaty		"Reserved for pickle ;)";
   }
   
   /* These are hosts/identities that are not allowed on *THIS SERVER*. These
    * are actually modern-day K-lines with reasons attached to them.
    * If nothing is specified for the username, a *@ is appended to the
    * start of the identity mask. These do not effect other servers.
    */
   hosts {
      spambot!*@*;
      *!spammer@*;
      *!*@*.some-naughty.isp;
      this^guy!annoys@me.a.lot;
   }
}


# The list of arbitrators are needed on some networks for normal operation,
# such as networks with user services hosted as a single server. These define
# specific connections on the network which are allowed to bypass normal
# security restrictions, such as changing nicknames, modes, or spoofing
# identities for such commands as KICKs etc. They MUST be used cautiously,
# as any server which has this capability effective has the ability to make
# quite a mess of a network.
arbiters {
   servers {
//      services.eu.somenetwork.org;
//      services.us.somenetwork.org;
   }
}


/* Redirections are forcing certain things to be sent to another location.
 * These can be 'objects' such as channels, or hosts. Channels can be
 * redirected due to official status (eg. +ircopers isn't official and can
 * now be redirected to the official channel to stop any fake channels or
 * confused users).
 *
 * Hosts are redirected similar to 's-lines', however this redirection does
 * work a little differently. Redirection can be 'forced' which means the user
 * is given the redirection numeric and then disconnected, rather than an
 * unforced situation where the redirection is sent but the client is still
 * allowed to continue to connect into the network.
 *
 * The redirection numeric is dependant on the client being used, which at
 * the time of writing none of the common clients appear to support the
 * numeric, or at least support the numeric properly, so for the time being
 * it might be worth while not forcing redirections until such time as the
 * redirection numeric is widely known, unless of course you have a very good
 * reason (eg. you're a US server that doesn't want 90% of your traffic from
 * australia!)
 */
redirection {
   // List of channels to be redirected, simply a list of channels from and to
   channels {
      // Redirect all other help channels to a real help channel
      &help		"#Help";
      +help		"#Help";
      !help		"#Help";
      ~help		"#Help";

      // And a user-friendly version of the above
      help		"#Help";
   };
   
   // List of hosts to be redirected
   hosts {
      // Netspace has their own server!
      *.netspace.com.au {
         server = netspace.vic.au.austnet.org;
	 port = 6667;
	 forced = no;
	 reason = "Netspace customers should use their own server!";
      }
      
      // Default host to redirect to if we are full for some reason
      * {
         server = irc.foonetwork.org;
         port = 6667;
	 forced = no;
      }
   }
}


/* The network class defines connections to other servers, both incoming and
 * outgoing. This is a replacement of the old 'C/N-lines' from the dark-ages
 * ircd.conf :)
 */
network {
   /* Name of the network you are connecting this server to. If you are not
    * connecting it to a network, you can leave this blank and it will never
    * appear anywhere :) This should be in sync with every other server on
    * the network or else some clients may get 'confused'. :(
    */
   name = Kine-DEV;
   
   mothership.alien.intranet {
      /* Should we autoconnect to this server upon startup? With this
       * specified the server will continuously attempt to connect to server
       * when the server is not connected locally.
       */
      autoconnect = true;
      
      // Password for this connection (plain-text)
      password = "secretword";
      
      // The default port to connect to (may be overridden using /connect)
      defaultPort = 6667;
   }
}


// Load the some modules :)
module "./modules/mod_http.so";
module "./modules/mod_irc2user.so";
module "./modules/mod_snmp.so";

// Example of how to include a configuration file.
include "include.conf";


