/* handler.h
 * The handler class and sub-classes
 */

#ifndef __HANDLER_H_
# define __HANDLER_H_

class Handler;

# include "connection.h"
# include "daemon.h"
# include "str.h"
# include "server.h"
# include "channel.h"
# include "language.h"
# include "user.h"


class Handler {
 protected:
   Connection *connection;			// Recursive back up

 public:
   // Initialise the base class
   Handler(Connection *c)
     : connection(c)
       {};
   
   // Destructor
   virtual ~Handler(void) {};

   // Return the connection link
   Connection *getConnection(void) const
     {
	return connection;
     };

   virtual void goodbye(String const &) {};	// Handle a goodbye
   virtual void kill(String const &, 
		     String const &) {};	// Kill the connection (sharp)
   
   // Connection relevant stamp
   virtual time_t getStamp(void)
     {
	return 0;
     };
   
   // Server relevant stamp
   virtual time_t returnStamp(time_t)
     {
	return 0;
     };

   // Protocol output routines
   virtual void sendAccept(User *, User *) const {};
   virtual void sendAway(User *) const {};
   virtual void sendChannelMode(Channel *, User *, String const &) const {};
   virtual void sendInvite(User *, Channel *, User *, time_t) const {};
   virtual void sendJoin(Channel *, User *) const {};
   virtual void sendKick(Channel *, User *, User *, String const &) const {};
   virtual void sendKill(User *, String const &, String const &) const {};
   virtual void sendKnock(User *, Channel *, String const &) const {};
   virtual void sendLanguage(User *, String const &, String const &) const {};
   virtual void sendNewNick(User *) const {};
   virtual void sendNickChange(User *, String const &) const {};
   virtual void sendNotice(Server *, User *, String const &) const {};
   virtual void sendNotice(User *, Channel *, String const &) const {};
   virtual void sendNotice(User *, User *, String const &) const {};
   virtual void sendNotice(User *, StringMask const &, String const &) const 
     {};
   virtual void sendNoticeAnon(Channel *, String const &) const {};
   virtual void sendNumeric(Server *, short, User *, String const &) const {};
   virtual void sendPart(Channel *, User *, String const &) const {};
   virtual void sendPing(void) const {};
   virtual void sendPrivmsg(Server *, User *, String const &) const {};
   virtual void sendPrivmsg(User *, Channel *, String const &) const {};
   virtual void sendPrivmsg(User *, User *, String const &) const {};
   virtual void sendPrivmsg(User *, StringMask const &, String const &) const 
     {};
   virtual void sendPrivmsgAnon(Channel *, String const &) const {};
   virtual void sendQuit(User *, String const &) const {};
   virtual void sendServerMode(Server *, Server *, String const &) const {};
   virtual void sendServerMode(Server *, User *, String const &) const {};
   virtual void sendSilence(User *, bool, StringMask const &) const {};
   virtual void sendTopic(Channel *, Server *, String const &) const {};
   virtual void sendTopic(Channel *, User *, String const &) const {};	
   virtual void sendUserMode(User *, String const &) const {};
   virtual void sendWallops(Server *, String const &) const {};
   virtual void sendWallops(User *, String const &) const {};
   virtual void sendWatchOff(Server *) const {};
   virtual void sendWatchOff(Channel *) const {};
   virtual void sendWatchOff(User *) const {};
   virtual void sendWatchOn(Server *) const {};
   virtual void sendWatchOn(User *, String const & = "") const {};
   virtual void sendWatchOn(Channel *, String const &) const {};
   
   // Calls for remotes (similar to sends, really)
   virtual void callADMIN(Server *, User *) const {};
   virtual void callINFO(Server *, User *) const {};
   virtual void callLUSERS(Server *, User *, String const &) const {};
   virtual void callMOTD(Server *, User *) const {};
   virtual void callSTATS(Server *, User *, String const &) const {};
   virtual void callTIME(Server *, User *) const {};
   virtual void callVERSION(Server *, User *) const {};
   virtual void callWHOIS(Server *, User *, String const &) const {};

   // Parse a line
   virtual void parseLine(String const &) {};
   
   // These are responces to requests by either remote or local users
   static void doADMIN(Handler *, User *);
   static void doINFO(Handler *, User *);
   static void doLUSERS(Handler *, User *, String const &);
   static void doMOTD(Handler *, User *);
   static void doSTATS(Handler *, User *, String const &);
   static void doTIME(Handler *, User *);
   static void doVERSION(Handler *, User *);
   static void doWHOIS(Handler *, User *, String const &);
};


# ifdef HAVE_PROTOCOL_IRC2USER
// IRC-2 User-handler sub-class
class irc2userHandler : public Handler {
 private:
#  ifdef FLOODLOCK_AWAY_SET
   time_t lastAwaySet;				// Time the away msg was set
   bool lastAwaySetGrace;			// Grace to allow an extra set
#  endif
   
   User *user;					// Link to the user data

   struct functionTableStruct {
      char const *command;			// Command name
      void (*function)(irc2userHandler *handler, 
		       StringTokens *tokens);	// Parsing handler function
      unsigned char const penalty;		// Calling penalty amount
      bool const (*access)(User *u);		// Access checking function
      char const *parameters;			// Parameter string for HELP
      char const *help;				// Plain-text line for HELP
   }; 
   static struct functionTableStruct const functionsTable[];

   String processUserModes(String &, StringTokens *,
			   bool = false);	// Process a usermode request
   
   void sendGoodbye(String const &) const;	// Closing link message
   void sendNumeric(short, String const &) 
     const;					// Send numeric, breif
   void sendPong(String const &) const;		// PING reply
   void sendWhoReply(User *, Channel *,
		     ChannelMember *) const;	// WHO reply

   // Helpers
   void doNAMES(String const &);		// Do a NAMES request
   
   // Protocol input
   static void parseACCEPT(irc2userHandler *handler, StringTokens *tokens);
   static void parseADMIN(irc2userHandler *handler, StringTokens *tokens);
   static void parseAWAY(irc2userHandler *handler, StringTokens *tokens);
   static void parseCONNECT(irc2userHandler *handler, StringTokens *tokens);
   static void parseDIE(irc2userHandler *handler, StringTokens *tokens);
   static void parseGLOBOPS(irc2userHandler *handler, StringTokens *tokens);
   static void parseHELP(irc2userHandler *handler, StringTokens *tokens);
   static void parseHELPME(irc2userHandler *handler, StringTokens *tokens);
   static void parseINFO(irc2userHandler *handler, StringTokens *tokens);
   static void parseINVITE(irc2userHandler *handler, StringTokens *tokens);
   static void parseISON(irc2userHandler *handler, StringTokens *tokens);
   static void parseJOIN(irc2userHandler *handler, StringTokens *tokens);
   static void parseKICK(irc2userHandler *handler, StringTokens *tokens);
   static void parseKILL(irc2userHandler *handler, StringTokens *tokens);
   static void parseKNOCK(irc2userHandler *handler, StringTokens *tokens);
   static void parseLANGUAGE(irc2userHandler *handler, StringTokens *tokens);
   static void parseLINKS(irc2userHandler *handler, StringTokens *tokens);
   static void parseLIST(irc2userHandler *handler, StringTokens *tokens);
   static void parseLOCOPS(irc2userHandler *handler, StringTokens *tokens);
   static void parseLUSERS(irc2userHandler *handler, StringTokens *tokens);
   static void parseMAP(irc2userHandler *handler, StringTokens *tokens);
   static void parseMODE(irc2userHandler *handler, StringTokens *tokens);
   static void parseMOTD(irc2userHandler *handler, StringTokens *tokens);
   static void parseNAMES(irc2userHandler *handler, StringTokens *tokens);
   static void parseNICK(irc2userHandler *handler, StringTokens *tokens);
   static void parseNOTICE(irc2userHandler *handler, StringTokens *tokens);
   static void parseOPER(irc2userHandler *handler, StringTokens *tokens);
   static void parsePART(irc2userHandler *handler, StringTokens *tokens);
   static void parsePING(irc2userHandler *handler, StringTokens *tokens);
   static void parsePONG(irc2userHandler *handler, StringTokens *tokens);
   static void parsePRIVMSG(irc2userHandler *handler, StringTokens *tokens);
   static void parseQUIT(irc2userHandler *handler, StringTokens *tokens);
   static void parseREHASH(irc2userHandler *handler, StringTokens *tokens);
   static void parseRESTART(irc2userHandler *handler, StringTokens *tokens);
   static void parseSERVLIST(irc2userHandler *handler, StringTokens *tokens);
   static void parseSILENCE(irc2userHandler *handler, StringTokens *tokens);
   static void parseSQUIT(irc2userHandler *handler, StringTokens *tokens);
   static void parseSTATS(irc2userHandler *handler, StringTokens *tokens);
   static void parseTIME(irc2userHandler *handler, StringTokens *tokens);
   static void parseTOPIC(irc2userHandler *handler, StringTokens *tokens);
   static void parseTRACE(irc2userHandler *handler, StringTokens *tokens);
#  ifdef HAVE_CMD_TRACEROUTE
   static void parseTRACEROUTE(irc2userHandler *handler, StringTokens *tokens);
#  endif
   static void parseUSERHOST(irc2userHandler *handler, StringTokens *tokens);
   static void parseUSERIP(irc2userHandler *handler, StringTokens *tokens);
   static void parseVERSION(irc2userHandler *handler, StringTokens *tokens);
   static void parseWATCH(irc2userHandler *handler, StringTokens *tokens);
   static void parseWALLCHOPS(irc2userHandler *handler, StringTokens *tokens);
#  ifdef ALLOW_OPER_WALLOPS
   static void parseWALLOPS(irc2userHandler *handler, StringTokens *tokens);
#  endif
   static void parseWHO(irc2userHandler *handler, StringTokens *tokens);
   static void parseWHOIS(irc2userHandler *handler, StringTokens *tokens);
   static void parseWHOWAS(irc2userHandler *handler, StringTokens *tokens);

 public:
   irc2userHandler(Connection *, User *, String);	// Constructor
   ~irc2userHandler(void);				// Destructor

   // Operations
   void goodbye(String const &);
   void kill(String const &, String const &);
   
   // Protocol output routines...
   void sendInvite(User *, Channel *, User *, time_t) const;
   void sendJoin(Channel *, User *) const;
   void sendChannelMode(Channel *, User *, String const &) const;
   void sendKick(Channel *, User *, User *, String const &) const;
   void sendKill(User *, String const &, String const &) const;
   void sendKnock(User *, Channel *, String const &) const;
   void sendLanguage(User *, String const &, String const &) const;
   void sendNickChange(User *, String const &) const;
   void sendNotice(Server *, User *, String const &) const;
   void sendNotice(User *, Channel *, String const &) const;
   void sendNotice(User *, User *, String const &) const;
   void sendNotice(User *, StringMask const &, String const &) const;
   void sendNoticeAnon(Channel *, String const &) const;
   void sendNumeric(Server *, short, User *, String const &) const;
   void sendPart(Channel *, User *, String const &) const;
   void sendPing(void) const;
   void sendPrivmsg(Server *, User *, String const &) const;
   void sendPrivmsg(User *, Channel *, String const &) const;
   void sendPrivmsg(User *, User *, String const &) const;
   void sendPrivmsg(User *, StringMask const &, String const &) const;
   void sendPrivmsgAnon(Channel *, String const &) const;
   void sendQuit(User *, String const &) const;
   void sendServerMode(Server *, Server *, String const &) const;
   void sendServerMode(Server *, User *, String const &) const;
   void sendSilence(User *, bool, StringMask const &) const;
   void sendUserMode(User *, String const &) const;
   void sendTopic(Channel *, Server *, String const &) const;
   void sendTopic(Channel *, User *, String const &) const;
   void sendWallops(Server *, String const &) const;
   void sendWallops(User *, String const &) const;
   void sendWatchOff(Server *) const;
   void sendWatchOff(Channel *) const;
   void sendWatchOff(User *) const;
   void sendWatchOn(Server *) const;
   void sendWatchOn(User *, String const & = "") const;
   void sendWatchOn(Channel *, String const &) const;
   
   // Protocol input
   void parseLine(String const &);
};
# endif


# ifdef HAVE_PROTOCOL_P13SERVER
// P13-handler sub-class
class p13serverHandler : public Handler {
 private:
   Server *server;				// Server data

   time_t stampDiff;				// Timestamp difference

   struct functionTableStruct {
      char const *command;			// Command name
      void (*function)(p13serverHandler *handler, String const &origin,
		       StringTokens *tokens);	// Parsing handler function
   }; 
   static struct functionTableStruct const functionsTable[];

   static String modeWrapper(User *);		// Fix up user modes
   
   void sendJoin(String const &, User *) const;	// Send a multiple join message
   void sendPong(String const &) const;		// PING reply
   void sendSQUIT(String const &, Server *, 
		  String const &) const;	// Closing link message
   
   void callGeneric(char const *, Server *, User *, 
		    String const & = "") const;	// Generic remote call function
   
   // Protocol input
   static void parseACCEPT(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseADMIN(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseAWAY(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseCONNECT(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseEND_OF_BURST(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseGLOBOPS(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseHELPME(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseINFO(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseINVITE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseJOIN(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseKICK(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseKILL(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseLANGUAGE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseMODE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseMOTD(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseNICK(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseNOTICE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parsePART(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parsePING(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parsePONG(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parsePRIVMSG(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseQUIT(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseRPING(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseRPONG(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSERVER(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSERVICE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSETTIME(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSILENCE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSQUIT(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseSTATS(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseTIME(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseTOPIC(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseTRACE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseTRACEROUTE(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseVERSION(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseWALLOPS(p13serverHandler *handler, String const &origin, StringTokens *tokens);
   static void parseWHOIS(p13serverHandler *handler, String const &origin, StringTokens *tokens);

 public:
   p13serverHandler(Connection *, Server *, 
		    time_t, time_t);		// Constructor
   ~p13serverHandler(void);			// Destructor

   // Operations
   void goodbye(String const &);
   time_t getStamp(void);
   time_t returnStamp(time_t);
   
   // Protocol output routines...
   void sendAway(User *) const;
   void sendJoin(Channel *, User *) const;
   void sendNewNick(User *) const;
   void sendNotice(User *, User *, String const &) const;
   void sendNumeric(Server *, short, User *, String const &) const;
   void sendPing(void) const;
   void sendPrivmsg(User *, User *, String const &) const;
   
   // Calls for remotes (similar to sends, really)
   void callADMIN(Server *, User *) const;
   void callINFO(Server *, User *) const;
   void callLUSERS(Server *, User *, String const &) const;
   void callMOTD(Server *, User *) const;
   void callSTATS(Server *, User *, String const &) const;
   void callTIME(Server *, User *) const;
   void callVERSION(Server *, User *) const;
   void callWHOIS(Server *, User *, String const &) const;

   // Protocol input
   void parseLine(String const &);
};
# endif


# ifdef HAVE_PROTOCOL_P14SERVER
// P14-handler sub-class
class p14serverHandler : public Handler {
 private:
   Server *server;				// Server data

   struct functionTableStruct {
      char const command;			// Command name
      void (*function)(p14serverHandler *handler, String const &origin, 
		       StringTokens *tokens);	// Parsing handler function
   }; 
   static struct functionTableStruct const functionsTable[];

 public:
   p14serverHandler(Connection *, Server *);	// Constructor
   ~p14serverHandler(void);			// Destructor
};
# endif


// Register-handler sub-class
class registerHandler : public Handler {
 private:
   String password;				// Logon password
# ifdef ALLOW_CLIENT_CONNECTIONS
   String nickname;				// Nickname (client)
# endif
   String username;				// Username (server & client)
   String hostname;				// Host name (server & client)
   String realname;				// Client Real Name/Server description
# ifdef ALLOW_SERVICE_CONNECTIONS
   String distribution;				// Visibility range (service)
# endif
# ifdef USER_CONNECTION_PINGPONG
   String pingpong;				// Ping/Pong string
   bool gotPong;				// Did we got a pong?
# endif
   String modes;				// Modes for next handler
   int protocol;				// Protocol version number
   time_t startStamp;				// Received start time-stamp
   time_t linkStamp;				// Received link time-stamp
# ifdef MAX_REGISTRATION_LINES
   unsigned char numLines;			// Number of lines received
# endif
   
   enum {
      IN_PROGRESS,			// Waiting for info
      CLIENT,				// User connection
      SERVER,				// Server connection
      SERVICE				// Service connection
   } regmode;					// Registration mode
   
   struct functionTableStruct {
      char const *command;			// Command name
      void (*function)(registerHandler *handler,
		       StringTokens *tokens);	// Parsing handler function
   };
   
   static struct functionTableStruct const functionsTable[];
   
   void sendGeneric(char const *, 
		    String const &) const;	// Generic send routine
   void sendNumeric(short, User *, 
		    String const &) const;	// Minature send-numeric

   // Protocol Input
   static void parseCAPAB(registerHandler *handler, StringTokens *tokens);
   static void parseNICK(registerHandler *handler, StringTokens *tokens);
   static void parsePASS(registerHandler *handler, StringTokens *tokens);
   static void parsePONG(registerHandler *handler, StringTokens *tokens);
   static void parseQUIT(registerHandler *handler, StringTokens *tokens);
# ifdef ALLOW_SERVER_CONNECTIONS
   static void parseSERVER(registerHandler *handler, StringTokens *tokens);
# endif
# ifdef ALLOW_SERVICE_CONNECTIONS
   static void parseSERVICE(registerHandler *handler, StringTokens *tokens);
# endif
# ifdef ALLOW_CLIENT_CONNECTIONS
   static void parseUSER(registerHandler *handler, StringTokens *tokens);
# endif

 public:
   registerHandler(Connection *);		// Constructor
   
   // Protocol Input
   void parseLine(String const &);
};

#endif

