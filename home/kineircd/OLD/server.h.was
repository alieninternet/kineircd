/* server.h
 * User class
 */

#ifndef __SERVER_H_
# define __SERVER_H_

class Server;

# include "handler.h"
# include "str.h"
# include "modes.h"

# define SERVERFLAG_STAR	0x0001		// Star topology?
# define SERVERFLAG_TENDRIL	0x0002		// Link is a 'tendril'?

typedef unsigned short TYPE_SERVERFLAGS;

class Server {
 public:
   typedef unsigned short flags_t;

   // Server mode type - do not change this - P14 needs this to be the same
   typedef unsigned long modes_t;

// private:
 public:
   // Server mode table structure
   struct modeTableStruct {
      char letter;			// Letter of this mode
      modes_t flag;			// Flag used in bit-wise operations
      bool hasParamOn;			// Requires a parameter to set?
      bool hasParamOff;			// Requires a parameter to unset?
      bool operToggle;			// Can this mode be toggled by opers?
      bool (*toggler)(bool setting, Server *server, String *param);	// Function to toggle this mode
   };
   static struct modeTableStruct const modeTable[];

   String hostname;				// Server hostname
   String description;				// Server description
   flags_t flags;				// Server flags
   modes_t modes;				// Server modes
   Handler *handler;				// Link into user handler
   unsigned char numHops;			// Number of hops away
   unsigned int numUsers;			// Number of users connected

 public:
   /* Server modes (note modes that use paramters are not listed here)
    * WARNING!! Do not change these once they are set! P14 relies on them
    * being constant over ALL servers!
    */
   static modes_t const MODE_HIDDEN		= 0x0000000000000001; // +h
   static modes_t const MODE_NOOP		= 0x0000000000000002; // +n
   static modes_t const MODE_AUTOTBS		= 0x0000000000000004; // +a
   static modes_t const MODE_REMOTEMOTD		= 0x0000000000000008; // +M
   static modes_t const MODE_SHORTMOTD		= 0x0000000000000010; // +m
   static modes_t const MODE_MODELOCK		= 0x0000000000000020; // +L
   static modes_t const MODE_USERSFULL		= 0x0000000000000040; // +F

   // Server mode stuff
   static const char *modeStr;			// Chars of modes
   static const char *modeParamStr;		// Chars of modes with params

   // Constructors
   Server(void)
     : hostname(""), 
       description(""), 
       flags(0), 
       modes(0), 
       handler(0),
       numHops(0),
       numUsers(0)
     {};
   
   Server(String const &ho, String const &d, unsigned char hops)
     : hostname(ho),
       description(d),
       flags(0),
       modes(0),
       handler(0),
       numHops(hops),
       numUsers(0)
     {};

   // Copy constructor
   Server(Server const &s)
     : hostname(s.hostname),
       description(s.description),
       flags(s.flags),
       modes(s.modes),
       handler(s.handler),
       numHops(s.numHops),
       numUsers(s.numUsers)
     {};
   
   // Variable access
   String getHostname(void) const		// Return the hostname
     {
	return hostname;
     };
   
   String getDescription(void) const		// Return the description/name
     {
	return description;
     };
   
   flags_t getFlags(void) const			// Return the flags integer
     {
	return flags;
     };

   void setFlag(flags_t flag)			// Set a server flag
     {
	flags |= flag;
     };
   
   bool isModeSet(modes_t mode) const		// Is a mode set?
     {
	return (modes & mode);
     };
   
   modes_t getModes(void) const			// Return the modes integer
     {
	return modes;
     };
   
   bool isLocal(void) const			// Is the server local?
     {
	return (handler > 0);
     };
   
   Handler *getHandler(void) const		// Return the handler (maybe)
     {
	return handler;
     };
   
   bool resetHandler(Handler *h)		// Re-set the handler (maybe)
     {
	if (!handler) {
	   handler = h;
	   return true;
	}
	return false;
     };
   
   unsigned char getNumHops(void) const		// Grab number of hops
     {
	return numHops;
     };
   
   unsigned int getNumUsers(void) const		// Grab number of users there
     {
	return numUsers;
     };
   
   static String makeModes(Server *);		// Make a + server mode string
   
   friend Daemon;
};

#endif

