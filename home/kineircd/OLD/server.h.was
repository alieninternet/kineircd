/* server.h
 * User class
 * 
 * Copyright (c) 2001,2002 AustHex Development Team
 * (See DEV-TEAM file for details)
 *
 * This file is a part of AustHex.
 * 
 * AustHex is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AustHex is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AustHex; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#ifndef __SERVER_H__
# define __SERVER_H__

# ifdef STL_HAS_HASH
#  include <hash_map>
# endif

# ifdef STL_HAS_SLIST
#  include <slist>
# endif

class Server;

# include "handler.h"
# include "str.h"

# define SERVERFLAG_STAR	0x0001		// Star topology?
# define SERVERFLAG_TENDRIL	0x0002		// Link is a 'tendril'?

class Server {
 public:
# ifdef STL_HAS_HASH
   typedef std::hash_map <String, Server *> server_map_t;
   typedef std::hash_map <String, User *> user_map_t;
# else
   typedef std::map <String, Server *> server_map_t;
   typedef std::map <String, User *> user_map_t;
# endif

   typedef unsigned short flags_t;

   // Server mode type - do not change this - P14 needs this to be the same
   typedef unsigned long modes_t;

// private:
 public:
   // Server mode table structure
   struct modeTableStruct {
      char letter;			// Letter of this mode
      modes_t flag;			// Flag used in bit-wise operations
      bool hasParamOn;			// Requires a parameter to set?
      bool hasParamOff;			// Requires a parameter to unset?
      bool operToggle;			// Can this mode be toggled by opers?
      bool (*toggler)(bool setting, Server *server, String *param);	// Function to toggle this mode
   };
   static struct modeTableStruct const modeTable[];

   String hostname;				// Server hostname
   String description;				// Server description
   flags_t flags;				// Server flags
   modes_t modes;				// Server modes
   Handler *handler;				// Link into user handler
   unsigned char protocol;			// Protocol number
   unsigned char numHops;			// Number of hops away
   unsigned int numUsers;			// Number of users connected

   server_map_t servers;			// Servers on this server list
   user_map_t users;				// Users on this server list
   
   // Server mode change routines
   static bool toggleModeAUTOTBS(bool setting, Server *server, String *param);
   static bool toggleModeHIDDEN(bool setting, Server *server, String *param);
   static bool toggleModeMODELOCK(bool setting, Server *server, String *param);
   static bool toggleModeNOOP(bool setting, Server *server, String *param);
   static bool toggleModeREMOTEMOTD(bool setting, Server *server, String *param);
   static bool toggleModeSHORTMOTD(bool setting, Server *server, String *param);
   static bool toggleModeUSERSFULL(bool setting, Server *server, String *param);

 public:
   /* Server modes (note modes that use paramters are not listed here)
    * WARNING!! Do not change these once they are set! P14 relies on them
    * being constant over ALL servers!
    */
   static modes_t const M_HIDDEN		= 0x0000000000000001; // +h
   static modes_t const M_NOOP			= 0x0000000000000002; // +n
   static modes_t const M_AUTOTBS		= 0x0000000000000004; // +a
   static modes_t const M_REMOTEMOTD		= 0x0000000000000008; // +M
   static modes_t const M_SHORTMOTD		= 0x0000000000000010; // +m
   static modes_t const M_MODELOCK		= 0x0000000000000020; // +L
   static modes_t const M_USERSFULL		= 0x0000000000000040; // +F

   // Server mode stuff
   static char const *modeStr;			// Chars of modes
   static char const *modeParamStr;		// Chars of modes with params

   // Constructors
   Server(void)
     : hostname(""), 
       description(""), 
       flags(0), 
       modes(0), 
       handler(0),
       protocol(HIGHEST_SUPPORTED_SERVER_PROTOCOL),
       numHops(0),
       numUsers(0)
     {
	users.clear();
	servers.clear();
     };
   
   Server(String const &ho, String const &d, unsigned char p, 
	  unsigned char hops)
     : hostname(ho),
       description(d),
       flags(0),
       modes(0),
       handler(0),
       protocol(p),
       numHops(hops),
       numUsers(0)
     {
	users.clear();
	servers.clear();
     };

   // Copy constructor
//   Server(Server const &s)
//     : hostname(s.hostname),
//       description(s.description),
//       flags(s.flags),
//       modes(s.modes),
//       handler(s.handler),
//       numHops(s.numHops),
//       numUsers(s.numUsers)
//     {};
   
   // Variable access
   String getHostname(void) const {		// Return the hostname
      return hostname;
   };
   
   String getDescription(void) const {		// Return the description/name
      return description;
   };
   
   flags_t getFlags(void) const	{		// Return the flags integer
      return flags;
   };

   void setFlag(flags_t flag) {			// Set a server flag
      flags |= flag;
   };
   
   bool isModeSet(modes_t mode) const {		// Is a mode set?
      return (modes & mode);
   };
   
   modes_t getModes(void) const	{		// Return the modes integer
      return modes;
   };
   
   bool isLocal(void) const {			// Is the server local?
      return (handler > 0);
   };
   
   Handler *getHandler(void) const {		// Return the handler (maybe)
      return handler;
   };
   
   bool resetHandler(Handler *h) {		// Re-set the handler (maybe)
      if (!handler) {
	 handler = h;
	 return true;
      }
      return false;
   };
   
   unsigned char getProtocol(void) const {	// Grab protocol number
      return protocol;
   };
   
   unsigned char getNumHops(void) const {	// Grab number of hops
      return numHops;
   };

   unsigned int getNumUsers(void) const {	// Grab number of users there
      return numUsers;
   };
   
   static String makeModes(Server *);		// Make a + server mode string
   
   friend class Daemon;
};

#endif

