/* user.cpp
 * User and associated classes
 */

#include "config.h"

#include "daemon.h"
#include "user.h"
#include "channel.h"
#include "numerics.h"
#include "language.h"
#include "utils.h"
#include "modes.h"


// User modes -- IMPORTANT: Update the mode strings as you update the table!
char const *User::modeStr 		= "dghkiInoOrRsSvw";
char const *User::modeParamStr 		= "s";
struct User::modeTableStruct const User::modeTable[] = {
     { 'd',	MODE_DEAF,		false,	false,	true,
	toggleUsermodeDEAF
     },
     { 'g',	MODE_IGNORING,		false,	false,	false,
	toggleUsermodeIGNORING
     },
     { 'h',	MODE_HELPER,		false,	false,	true,
	toggleUsermodeHELPER
     },
     { 'k',	MODE_NONKICKABLE,	false,	false,	false,
	toggleUsermodeNONKICKABLE
     },
     { 'i',	MODE_INVISIBLE,		false,	false,	true,
	toggleUsermodeINVISIBLE
     },
     { 'I',	MODE_IDENTIFIED,	false,	false,	false,
	toggleUsermodeIDENTIFIED
     },
     { 'n',	MODE_GOT_IDENTD,	false,	false,	false,
	toggleUsermodeGOT_IDENTD
     },
     { 'o',	MODE_LOCALOPER,		false,	false,	true,
	toggleUsermodeOPER
     },
     { 'O',	MODE_GLOBALOPER,	false,	false,	true,
	toggleUsermodeOPER
     },
     { 'r',	MODE_RESTRICTED,	false,	false,	false,
	toggleUsermodeRESTRICTED
     },
     { 'R',	MODE_REGNICKSMSG,	false,	false,	true,
	toggleUsermodeREGNICKSMSG
     },
     { 's',	0,			true,	false,	true,
	toggleUsermodeSERVNOTICES
     },
     { 'S',	MODE_SECURE,		false,	false,	false,
	toggleUsermodeSECURE
     },
     { 'v',	MODE_VWORLD,		false,	false,	true,
	toggleUsermodeVWORLD
     },
     { 'w',	MODE_WALLOPS,		false,	false,	true,
	toggleUsermodeWALLOPS
     },
     { 0 }
};


/* getChannel - Look through our local channel list for a channel
 * Original 15/08/01, Simon Butcher <pickle@austnet.org>
 * Note: Minature version of what appears for the main channel list, why
 *       we do this is for speed purposes mainly
 */
Channel *User::getChannel(String &channel)
{
   // Look for this channel
   String chan = channel.IRCtoLower();
   Channel *c = channels[chan];
   
   // Make sure we got this user
   if (c) {
      return c;
   };
   
   // Else we gotta delete this empty record we just made and return nothing
   channels.erase(chan);

   return 0;
}


/* markAway - Toggle the user's away 
 * Original 11/09/01, Simon Butcher <pickle@austnet.org
 */
void User::markAway(String &message)
{
   // Set the away message
#ifdef DEBUG
   if (message.length()) {
#endif
      awayMessage = message;
#ifdef DEBUG
   } else {
      // Sanity, but we should never get here honestly...
      debug(String::printf("Null away message on %s - very wrong!!",
			   (char const *)nickname));
   }
#endif
   
   // Broadcast the change
   
}


/* isSilencing - Check if the given user matches a mask on our silence list
 * Original 24/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::isSilencing(User *target)
{
   // Run through the list to find the mask
   for (silence_list_t::iterator it = silences.begin();
	it != silences.end(); it++) {
      // Check for a match on either the real or virtual world addresses
      if (it->matches(target->getAddress()) ||
	  it->matches(target->getVWAddress())) {
	 return true;
      }
   }
   
   // Must not be on the list..
   return false;
}


/* makeModes - [Various forms] Create a string of user modes
 * Original 24/08/01, Simon Butcher <pickle@austnet.org>
 */
String User::makeModes(TYPE_USERMODES modes)
{
   String reply = "+";
   
   // Run through the list of modes and check what needs to be shown
   for (int i = 0; modeTable[i].letter != 0; i++) {
      // Check if this mode flag is set
      if (modes & modeTable[i].flag) {
	 reply = reply + String(modeTable[i].letter);
      }
   }

   return reply;
}

String User::makeModes(User *user)
{
   String reply = "+";
   String params = "";
   
   // Run through the list of modes and check what needs to be shown
   for (int i = 0; modeTable[i].letter != 0; i++) {
      // Check if this mode flag is set
      if (user->modes & modeTable[i].flag) {
	 reply = reply + String(modeTable[i].letter);
      }
   }
   
   // Parameter based modes
   if (user->local && user->local->serverNotices) {
      reply = reply + "s";
      params = String(" ") + "?";
   }
   
   return reply + params;
}


