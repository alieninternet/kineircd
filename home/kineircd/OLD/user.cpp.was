/* user.cpp
 * User and associated classes
 */

#include "config.h"

#include <ctype.h>

#include "daemon.h"
#include "user.h"
#include "localuser.h"
#include "channel.h"
#include "numerics.h"
#include "language.h"
#include "utils.h"


// User modes -- IMPORTANT: Update the mode strings as you update the table!
char const *User::modeStr = 
  "dghkiInoOrRsSvw\241";
char const *User::modeParamStr = 
  "s";
struct User::modeTableStruct const User::modeTable[] = {
     { 'd',	M_DEAF,			false,	false,	true,
	User::toggleModeDEAF
     },
     { 'g',	M_IGNORING,		false,	false,	true,
	User::toggleModeIGNORING
     },
     { 'h',	M_HELPER,		false,	false,	true,
	User::toggleModeHELPER
     },
     { 'k',	M_NONKICKABLE,		false,	false,	false,
	User::toggleModeNONKICKABLE
     },
     { 'i',	M_INVISIBLE,		false,	false,	true,
	User::toggleModeINVISIBLE
     },
     { 'I',	M_IDENTIFIED,		false,	false,	false,
	User::toggleModeIDENTIFIED
     },
     { 'n',	M_GOT_IDENTD,		false,	false,	false,
	User::toggleModeGOT_IDENTD
     },
     { 'o',	M_LOCALOPER,		false,	false,	true,
	User::toggleModeOPER
     },
     { 'O',	M_GLOBALOPER,		false,	false,	true,
	User::toggleModeOPER
     },
     { 'r',	M_RESTRICTED,		false,	false,	false,
	User::toggleModeRESTRICTED
     },
     { 'R',	M_REGNICKSMSG,		false,	false,	true,
	User::toggleModeREGNICKSMSG
     },
     { 's',	0,			true,	false,	true,
	User::toggleModeSERVNOTICES
     },
     { 'S',	M_SECURE,		false,	false,	false,
	User::toggleModeSECURE
     },
     { 'v',	M_VWORLD,		false,	false,	true,
	User::toggleModeVWORLD
     },
     { 'w',	M_WALLOPS,		false,	false,	true,
	User::toggleModeWALLOPS
     },
     { '\241',	M_ROUTINGSTAFF,		false,	false,	false,
	User::toggleModeROUTINGSTAFF
     },
     { 0 }
};


/* getChannel - Look through our local channel list for a channel
 * Original 15/08/01, Simon Butcher <pickle@austnet.org>
 * Note: Minature version of what appears for the main channel list, why
 *       we do this is for speed purposes mainly
 */
Channel *User::getChannel(String &channel)
{
   // Look for this channel
   String chan = channel.IRCtoLower();
   Channel *c = channels[chan];
   
   // Make sure we got this user
   if (c) {
      return c;
   };
   
   // Else we gotta delete this empty record we just made and return nothing
   channels.erase(chan);

   return 0;
}


/* markAway - Toggle the user's away 
 * Original 11/09/01, Simon Butcher <pickle@austnet.org
 */
void User::markAway(String const &message)
{
   // Set the away message
   awayMessage = message;
   
   // Broadcast the change
   
}


/* setLangInfo - Set up new language information (dumb)
 * Original 31/10/01, Simon Butcher <pickle@austnet.org>
 */
void User::setLangInfo(String const &langl, String const &langc)
{
   // Set the variables
   langList = langl;
   langCharset = langc;
   
   // Send it to the user if they are local
   if (local) {
      local->handler->sendLanguage(this, langl, langc);
   }
};


/* isSilencing - Check if the given user matches a mask a particular mask list
 * Original 24/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::isSilencing(User *target)
{
   // Run through the list to find the mask
   for (silence_list_t::iterator it = silences.begin();
	it != silences.end(); it++) {
      // Check for a match on either the real or virtual world addresses
      if (it->matches(target->getAddress()) ||
	  it->matches(target->getVWAddress())) {
	 return true;
      }
   }
   
   // Must not be on the list..
   return false;
}


/* okName - Check if a nickname contains ok characters and is short enough
 * Original 12/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::okName(String const &nick)
{
   // Check that the nickname is within limits
   if (nick.length() > MAXLEN_NICKNAME) {
      return false;
   }

   // Check the first char, it cannot be a number
   if (isdigit(nick[0])) {
      return false;
   }
   
   // Run through the nickname and look for nasty characters
   for (String::length_t i = nick.length(); i--;) {
      char c = nick[i];

      if (!(isalnum(c) || 
	    (((c > 0x5A) && (c < 0x61)) || // check 'special' (see RFC2812)
	     ((c > 0x7A) && (c < 0x7E))) ||
	    (c == '-'))) {
	 return false;
      }
   }

   return true;
}


/* makeModes - [Various forms] Create a string of user modes
 * Original 24/08/01, Simon Butcher <pickle@austnet.org>
 */
String User::makeModes(modes_t modes)
{
   String reply = "+";
   
   // Run through the list of modes and check what needs to be shown
   for (int i = 0; modeTable[i].letter != 0; i++) {
      // Check if this mode flag is set
      if (modes & modeTable[i].flag) {
	 reply = reply + String(modeTable[i].letter);
      }
   }

   return reply;
}

String User::makeModes(User *user)
{
   String reply = "+";
   String params = "";
   
   // Run through the list of modes and check what needs to be shown
   for (int i = 0; modeTable[i].letter != 0; i++) {
      // Check if this mode flag is set
      if (user->modes & modeTable[i].flag) {
	 reply = reply + String(modeTable[i].letter);
      }
   }
   
   // Parameter based modes
   if (user->local && user->local->serverNotices) {
      reply = reply + "s";
      params = String(" ") + "?";
   }
   
   return reply + params;
}


/* User::toggleModeDEAF
 * Original 25/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeDEAF(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_DEAF)) {
      user->modes |= User::M_DEAF;
      return true;
   } else if (!setting && (user->modes & User::M_DEAF)) {
      user->modes &= ~User::M_DEAF;
      return true;
   }
   
   return false;
}


/* User::toggleModeGOT_IDENTD
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeGOT_IDENTD(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_GOT_IDENTD)) {
      user->modes |= User::M_GOT_IDENTD;
      return true;
   } else if (!setting && (user->modes & User::M_GOT_IDENTD)) {
      user->modes &= ~User::M_GOT_IDENTD;
      return true;
   }
   
   return false;
}


/* User::toggleModeHELPER
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeHELPER(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   // Check if we are turning this on
   if (setting) {
      if (handler) {
	 /* Tell the user they're an idiot :) */
	 if (!(user->modes & User::M_HELPER)) {
	    handler->sendNumeric(Daemon::myServer(),
				 ERR_NOPRIVILEGES, 0,
				 Language::L_ERR_NOPRIVILEGES_PLUS_HELPER);
	 }
	 return false;
      } else {
	 // Turn it on
	 user->modes |= User::M_HELPER;
	 
	 // Modify the helper counter
	 Daemon::numHelpers++;
	 
	 return true;
      }
   }
   
   // If this user is not a helper, this does not have an effect at all
   if (!(user->modes & User::M_HELPER)) {
      return false;
   }
   
   // Turn off the flag and return true
   user->modes &= ~User::M_HELPER;

   // Modify the helper counter
   Daemon::numHelpers--;
	 
   return true;
}


/* User::toggleModeIDENTIFIED
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeIDENTIFIED(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_IDENTIFIED)) {
      user->modes |= User::M_IDENTIFIED;
      return true;
   } else if (!setting && (user->modes & User::M_IDENTIFIED)) {
      user->modes &= ~User::M_IDENTIFIED;
      return true;
   }
   
   return false;
}


/* User::toggleModeIGNORING
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeIGNORING(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_IGNORING)) {
      user->modes |= User::M_IGNORING;
      return true;
   } else if (!setting && (user->modes & User::M_IGNORING)) {
      user->modes &= ~User::M_IGNORING;
      return true;
   }
   
   return false;
}


/* User::toggleModeINVISIBLE
 * Original 25/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeINVISIBLE(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_INVISIBLE)) {
      user->modes |= User::M_INVISIBLE;
      return true;
   } else if (!setting && (user->modes & User::M_INVISIBLE)) {
      user->modes &= ~User::M_INVISIBLE;
      return true;
   }
   
   return false;
}


/* User::toggleModeNONKICKABLE
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeNONKICKABLE(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_NONKICKABLE)) {
      user->modes |= User::M_NONKICKABLE;
      return true;
   } else if (!setting && (user->modes & User::M_NONKICKABLE)) {
      user->modes &= ~User::M_NONKICKABLE;
      return true;
   }
   
   return false;
}


/* User::toggleModeOPER
 * Original 25/08/01, Simon Butcher <pickle@austnet.org>
 * Note: This can only be toggled off, not on.
 */
bool User::toggleModeOPER(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   // Check if this user is trying to turn this mode on
   if (setting) {
      if (handler) {
	 if (!(user->modes & User::M_GLOBALOPER) ||
	     !(user->modes & User::M_LOCALOPER)) {
	    /* Tell the user they're an idiot :) */
	    handler->sendNumeric(Daemon::myServer(),
				 ERR_NOPRIVILEGES, 0,
				 Language::L_ERR_NOPRIVILEGES_PLUS_IRCOPER);
	 }
	 return false;
      } else {
	 // If this is setting someone as a global operator, then turn it on.
	 if (*modeChr == 'O') {
	    user->modes |= User::M_GLOBALOPER;
	    return true;
	 }
	 
	 // Ignore it, must be a local oper and a mistake.
	 return false;
      }
   }
   
   // If this user is not an oper, this does not have an effect at all
   if (!(user->modes & User::M_GLOBALOPER) &&
       !(user->modes & User::M_LOCALOPER)) {
      return false;
   }
   
   // Fix up the character so that the client does not get confused.
   if (user->modes & User::M_GLOBALOPER) {
      // While we are here, decrement the global operator counter
      Daemon::numOpers--;
      
      *modeChr = 'O';
   } else {
      *modeChr = 'o';
   }
   
   // Turn off the oper flags and return true
   user->modes &= ~User::M_GLOBALOPER & ~User::M_LOCALOPER;

   return true;
}


/* User::toggleModeREGNICKSMSG
 * Original 30/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeREGNICKSMSG(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_REGNICKSMSG)) {
      user->modes |= User::M_REGNICKSMSG;

      // If this user is an oper or a helper they really should not have this
      if (handler && User::isHelper(user)) {
	 handler->sendNumeric(Daemon::myServer(),
			      RPL_MODECHANGEWARN, 0,
			      Language::L_RPL_MODECHANGEWARN_HELPER_PLUS_REGNICKSMSG);
      }
      
      return true;
   } else if (!setting && (user->modes & User::M_REGNICKSMSG)) {
      user->modes &= ~User::M_REGNICKSMSG;
      return true;
   }
   
   return false;
}


/* User::toggleModeRESTRICTED
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeRESTRICTED(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_RESTRICTED)) {
      user->modes |= User::M_RESTRICTED;
      return true;
   } else if (!setting && (user->modes & User::M_RESTRICTED)) {
      user->modes &= ~User::M_RESTRICTED;
      return true;
   }
   
   return false;
}


/* User::toggleModeROUTINGSTAFF
 * Original 21/10/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeROUTINGSTAFF(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_ROUTINGSTAFF)) {
      user->modes |= User::M_ROUTINGSTAFF;
      return true;
   } else if (!setting && (user->modes & User::M_ROUTINGSTAFF)) {
      user->modes &= ~User::M_ROUTINGSTAFF;
      return true;
   }
   
   return false;
}


/* User::toggleModeSECURE
 * Original 22/09/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeSECURE(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_SECURE)) {
      user->modes |= User::M_SECURE;
      return true;
   } else if (!setting && (user->modes & User::M_SECURE)) {
      user->modes &= ~User::M_SECURE;
      return true;
   }
   
   return false;
}


/* User::toggleModeSERVNOTICES
 * Original , Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeSERVNOTICES(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   // This should not be set remotely
   if (!user->local) {
      return false;
   }
   
   // Check if we are setting this mode
   if (setting) {
      // Check if we are a helper/oper
      if (User::isHelper(user)) {
	 user->local->serverNotices = 0xFFFFFFFF; // fix this.
	 return true;
      } else {
	 // Get cranky
	 if (handler) {
	    handler->sendNumeric(Daemon::myServer(),
				 ERR_NOPRIVILEGES, 0,
				 Language::L_ERR_NOPRIVILEGES_PLUS_SERVNOTICES);
	 }
	 return false;
      }
   } 

   // Turn off all the modes
   user->local->serverNotices = 0;
   
   // Return true, since the server notices are turned off completely
   return true;
}


/* User::toggleModeVWORLD
 * Original 25/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeVWORLD(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_VWORLD)) {
      user->modes |= User::M_VWORLD;
      return true;
   } else if (!setting && (user->modes & User::M_VWORLD)) {
      user->modes &= ~User::M_VWORLD;
      
      // Warn this user, if we can, about turning off virtual world
      if (handler) {
	 handler->sendNumeric(Daemon::myServer(),
			      RPL_MODECHANGEWARN, 0,
			      Language::L_RPL_MODECHANGEWARN_MINUS_VWORLD);
      }
      
      return true;
   }

   return false;
}


/* User::toggleModeWALLOPS
 * Original 25/08/01, Simon Butcher <pickle@austnet.org>
 */
bool User::toggleModeWALLOPS(bool setting, Handler *handler, User *user, char *modeChr, String *param)
{
   if (setting && !(user->modes & User::M_WALLOPS)) {
      user->modes |= User::M_WALLOPS;
      return true;
   } else if (!setting && (user->modes & User::M_WALLOPS)) {
      user->modes &= ~User::M_WALLOPS;
      
      // Check if we need to (and can) warn this user about this command
      if (handler &&
	  ((user->modes & User::M_GLOBALOPER) ||
	   (user->modes & User::M_LOCALOPER))) {
	 handler->sendNumeric(Daemon::myServer(),
			      RPL_MODECHANGEWARN, 0,
			      Language::L_RPL_MODECHANGEWARN_IRCOPER_MINUS_WALLOPS);
      }
      
      return true;
   }
   
   return false;
}


/* makeVWorld - Generate a virtual world hash on the given hostname
 * Original , Simon Butcher <pickle@austnet.org>
 */
String User::makeVWorld(String const &hostname)
{
   return String("vw1234.") + hostname;
}


/* addInvitation - Invite us to a channel!
 * Original 19/10/01, Simon Butcher <pickle@austnet.org>
 */
void LocalUser::addInvitation(Channel *channel, User *inviter, time_t expiry)
{
   // Only add it if it is not already there
   if (!invitedTo(channel)) {
      invitations[channel->getName()] =
	new LocalUserInvitation(inviter->getNickname(), expiry);
   }
}


/* invitedTo - Check if we are invited to a specific channel
 * Original 19/10/01, Simon Butcher <pickle@austnet.org>
 */
bool LocalUser::invitedTo(Channel *channel)
{
   // Look up the invitation
   LocalUserInvitation *invite = invitations[channel->getName()];
   
   // Check that we got it
   if (invite) {
      // Check the timeout
      if (!invite->getTimeout() ||
	  (invite->getTimeout() >
	   Daemon::getTime())) {
	 // Yes, we are invited to this channel
	 return true;
      } else {
	 // The record has timed out! Delete it and return false
	 invitations.erase(channel->getName());
	 delete invite;
	 
	 return false;
      }
   }
   
   // If we got here we did not get it, and we have to delete what we just made
   invitations.erase(channel->getName());
   
   return false;
};


/* onReplyFloodlockMap - Check for someone on a reply floodlock map
 * Original 21/10/01, Simon Butcher <pickle@austnet.org>
 */
bool LocalUser::onReplyFloodlockMap(LocalUser::floodlock_reply_map_t &lockmap,
				    time_t timelen, String const &target)
{
   // Try and look them up on the map
   time_t timeout = lockmap[target];
   
   // Check if that worked
   if (!timeout) {
      // Add them to the floodlock list
      lockmap[target] = Daemon::getTime();
      return false;
   }
   
   // If we got here, check that if the floodlock has timed out
   if ((timeout + timelen) > Daemon::getTime()) {
      // Timeout is still in effect
      return true;
   }

   // Remove them from the set, the timeout is ineffective now
   lockmap.erase(target);
   return false;
}




// These should be an inline....

#ifdef FLOODLOCK_ACCEPT_MSG
bool LocalUser::onAcceptMessageFloodlock(User *u)
{
   return onReplyFloodlockMap(acceptFloodlocks, FLOODLOCK_ACCEPT_MSG,
			      u->getNickname().IRCtoLower());
}
#endif

#ifdef FLOODLOCK_AWAY_REPLY
bool LocalUser::onAwayReplyFloodlock(User *u)
{
   return onReplyFloodlockMap(awayReplyFloodlocks, FLOODLOCK_AWAY_REPLY,
			      u->getNickname().IRCtoLower());
}
#endif
