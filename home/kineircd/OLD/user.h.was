/* user.h
 * User class
 */

#ifndef __USER_H_
# define __USER_H_

# include <time.h>
# include <map.h>

# ifdef STL_HAS_SLIST
#  include <slist>
# else
#  include <list.h>
# endif

class User;

# include "localuser.h"
# include "daemon.h"
# include "str.h"
# include "server.h"
# include "channel.h"
# include "handler.h"


// Main user class
class User {
 public:
   typedef map <String, Channel *> channel_map_t;
# ifdef STL_HAS_SLIST
   typedef slist <StringMask> silence_list_t;
# else
   typedef list <StringMask> silence_list_t;
# endif
   
   // User mode type - do not change this - P14 needs this to be the same
   typedef unsigned long long modes_t;
   
// private:
 public:
   // User mode table structure
   struct modeTableStruct {
      char letter;                 	// Letter of this mode
      modes_t flag; 	         	// Flag used in bit-wise operations
      bool hasParamOn;			// Requires a parameter to set?
      bool hasParamOff;			// Requires a parameter to unset?
      bool userToggle;			// Can users toggle this mode?
      bool (*toggler)(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);	// Function to toggle this mode
   };
   static struct modeTableStruct const modeTable[];
   
   String nickname;				// User nickname
   String const username;			// User name
   String const hostname;			// Host name
   String const vwhostname;			// Virtual world host name
//   String const ipaddress;			// IP Address
//   String const vwipaddress;			// Virtual world IP address
   String const realname;			// User real name
   modes_t modes;				// User modes
   
   time_t signonTime;				// Time user signed on
   time_t lastNickChange;			// Last nickname change

   String awayMessage;				// /AWAY message
   unsigned char status;			// Status
   
   Server *server;				// Server user is connected to
   LocalUser *local;				// Link into local user class
   
   channel_map_t channels;			// Channels this user is on
   
   silence_list_t silences;			// Silence list

   // User mode change routines
   static bool toggleModeDEAF(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeGOT_IDENTD(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeHELPER(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeIDENTIFIED(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeIGNORING(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeINVISIBLE(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeNONKICKABLE(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeOPER(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeREGNICKSMSG(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeRESTRICTED(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeSECURE(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeSERVNOTICES(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeVWORLD(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);
   static bool toggleModeWALLOPS(bool setting, Handler *handler, Daemon *daemon, User *user, char *modeChr, String *param);

 public:
   /* User modes (note modes that use paramters are not listed here)
    * WARNING!! Do not change these once they are set! P14 relies on them
    * being constant over ALL servers!
    * Note that the first byte is set up specifically to make it easy to
    * follow the irc2-user protocol for user registration in RFC 2812, so
    * best not to touch them especially :)
    */
   static modes_t const MODE_WALLOPS		= 0x0000000000000004; // +w
   static modes_t const MODE_INVISIBLE		= 0x0000000000000008; // +i
   static modes_t const MODE_NONKICKABLE	= 0x0000000000000100; // +k
   static modes_t const MODE_DEAF		= 0x0000000000000200; // +d
   static modes_t const MODE_SECURE		= 0x0000000000000400; // +S
   static modes_t const MODE_VWORLD		= 0x0000000000000800; // +v
   static modes_t const MODE_LOCALOPER		= 0x0000000000001000; // +o
   static modes_t const MODE_GLOBALOPER		= 0x0000000000002000; // +O
   static modes_t const MODE_HELPER		= 0x0000000000004000; // +h
   static modes_t const MODE_RESTRICTED		= 0x0000000000008000; // +r
   static modes_t const MODE_IDENTIFIED		= 0x0000000000010000; // +I
   static modes_t const MODE_GOT_IDENTD		= 0x0000000000020000; // +n
   static modes_t const MODE_REGNICKSMSG	= 0x0000000000040000; // +R
   static modes_t const MODE_IGNORING		= 0x0000000000080000; // +g
   
   // User mode stuff
   static const char *modeStr;
   static const char *modeParamStr;

   // Constructor
   User(String const &nick, String const &user, String ip, String host, 
	String vwhost, String real, time_t signon, Server *serv,
	modes_t mode = 0, unsigned char stat = 0)
     : nickname(nick),
       username(user),
       hostname(host),
       vwhostname(vwhost),
       realname(real),
       modes(mode),
       signonTime(signon),
       lastNickChange(signonTime),
       awayMessage(""),
       status(stat),
       server(serv),
       local(0)
     {
	channels.clear();
	silences.clear();
     };
   
   // Destructor
   ~User(void)
     {
	channels.clear();
	silences.clear();
     };

   // Access checking
   bool showVW(User *destination) const
     {
	if (isOper(destination) ||
	    !(modes & MODE_VWORLD) ||
	    this == destination) {
	   return false;
	}
	return true;
     };
   
   static bool const isOper(User *u)
     {
	return ((u->modes & MODE_GLOBALOPER) ||
		(u->modes & MODE_LOCALOPER));
     };
   
   static bool const isGlobalOper(User *u)
     {
	return (u->modes & MODE_GLOBALOPER);
     };

   static bool const isHelper(User *u)
     {
	return ((u->modes & MODE_HELPER) ||
		(u->modes & MODE_GLOBALOPER) ||
		(u->modes & MODE_LOCALOPER));
     };
      
   // Variable access
   String getNickname(void) const		// Grab the nickname
     {
	return nickname;
     };
   
   String getAddress(User *destination)		// Return appropriate address
     { 
	return (showVW(destination) ? getVWAddress() : getAddress());
     };
   
   String getAddress(void)			// Return address (x!y@z)
     {
	return (nickname + "!" + username + "@" + hostname);
     };
   
   String getVWAddress(void) const		// Above, but w/ virtual-world
     {
	return (nickname + "!" + username + "@" + vwhostname);
     };

   String getHost(User *destination) const
     {
	return (showVW(destination) ? vwhostname : hostname);
     };
   
   String getHost(void) const			// Return hostname
     {
	return hostname;
     };
   
   String getVWHost(void) const			// Return vworld hostname
     {
	return vwhostname;
     };
   
   Channel *getChannel(String &);		// Return a channel

   Server *getServer(void) const		// Get the server we are on
     {
	return server;
     };
   
   void markAway(String const &);		// Set/Unset away message
   
   bool isSilencing(User *);			// Silencing a user?

   static bool okName(String const &);		// Ok nickname?

   static String makeModes(modes_t);		// Make a + user mode string
   static String makeModes(User *);		// Above, but includes params

   static String makeVWorld(String const &);	// vworld host from a host/ip

};

#endif

