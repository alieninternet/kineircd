These are dirty notes for implementing IIRC, the inter-irc network stuff.

 * Accepted via the link are numerics from servers, PRIVMSG, NOTICE, and WHOIS
   commands. Also JOIN, PART and QUIT for servers using IIRC channels. Also
   IIRCCL to request a channel list from the remote server (also indicated
   support for that option - both servers should switch to that after someone
   requests it). Also EOB is also accepted
 
 * *NO* bursts, connections are totally stateless unless the optional IIRC
   channels are used.. ('~' prefixed channels).
   
 * Network names, not domains, are used to identify remote nicknames. Since
   the same nickname can exist on multiple networks, all remote nicknames
   have the "#<network name>" suffix. 

    Eg. "nick#networkA" and "nick#networkB" are different, and if you are
    on networkC then "nick#networkC" and "nick" are the same thing.
    
 * Local users should not have the #<network name> suffix, but it should still
   be accepted by both servers and clients.
   
 * IIRC ('~' prefixed) channels will operate similar to # channels, except
   no anonymous mode ('+a') should be allowed.
   
 * SILENCE and ACCEPT commands on the server *must* be able to block from
   remote networks..
   
 * No length limits on IIRCS links, unless servers need to limit privmsgs.

    
Example conversation: 'foo' is on networkA, 'bah' is on networkB

from foo's perspective:
  < PRIVMSG bah#networkB :Hello there, how are you?
  > bah#networkB!baz@somehost.com PRIVMSG foo :Hello! I'm good thanks.
  
from bah's perspective:
  > foo#networkA!fooey@anotherhost.com PRIVMSG bah :Hello there, how are you?
  < PRIVMSG foo#networkA :Hello! I'm good thanks.
  
This should integrate nicely with existing clients. In such time as the
trailing user@host can be removed (via CAPAB) that can also be dropped..


Example channel join: 'foo' and 'bah' are the same people

from foo's perspective (joining):
  < JOIN ~qux
  > foo!fooey@anotherhost.com JOIN :~qux
  > :server.networkA 332 foo ~qux :This is a topic
  > :server.networkA 333 foo ~qux bah#networkB 1023180774
  > :server.networkA 353 foo = ~qux :foo @bah#networkB +bazza#networkB
  > :server.networkA 366 foo ~qux :End of NAMES list
  < PRIVMSG ~qux :Hello everyone!
  > bah#networkB!baz@somehost.com PRIVMSG ~qux :Hey foo!
  
from bah's perspective (already in the channel):
  < TOPIC ~qux :This is a topic
  > :server.networkB 332 bah ~qux :This is a topic
   (check the topic to prove a point - note the name of the person setting it)
  < TOPIC ~qux
  > :server.networkB 332 bah ~qux :This is a topic
  > :server.networkB 333 bah ~qux bah 1023180774
   (foo joins)
  > foo#networkA!fooey@anotherhost.com JOIN :~qux
  > foo#networkA!fooey@anotherhost.com PRIVMSG ~qux :Hello everyone!
  < PRIVMSG ~qux :Hey foo!


Connection commands:
  IIRCS (connect an iirc server to server link):
  IIRCS <network> <protocol>  * * :<description>
    'network' is the name of the network connecting
    'protocol' is the name of the protocol being used. Currently the IRC2
       based protocol is called IIRC2
    'description' is the description of the network, a url, or whatever.
    * fields are for future use

Example server connection:
   (connects)
  < PASS VerySecretWord
  < IIRCS networkA IIRC2 ? * * :Network A !!
   (registration okay, dump our password string and who we know - networkB
    is also connected to networkC and networkD)
  > PASS ReplyingSecretWord
  > IIRCS networkB IIRC2 ? * * :Network B description!
  > IIRCS networkC IIRC2 ? * * :Network C's description
  > IIRCS networkD IIRC2 ? * * :Network D's description
  > EOB
   (we have nothing to send, our burst is over)
  < EOB
