This is a notes file for developers, outlining debugging, compilation
and code formatting information. Last updated 200203252022


* Keep in mind three debugging defines, DEBUG, DEBUG_EXTENDED and DEBUG_PSYCHO.
  DEBUG is to be used for information that won't send via debug() often and
  for *ALL* assert() calls or pointer/sanity checks. DEBUG_EXTENDED is for 
  information sent via debug() that might occur frequently or have a fair bit
  of output (such as entering certain functions, or outputting
  configuration information etc). DEBUG_PSYCHO is for procedures which will
  output a LOT of data, usually in something which has an enormous amount of
  iterations, but it is also used for anything which is heavily technical
  such as an enormous dump of pointer values etc. In debugging it is often more
  convenient to have the limited amount of information with just 'DEBUG' or
  'DEBUG_EXTENDED' defined, especially in the case of a server that is linked 
  to a network (eg. heaps of users/channels, lots of debug() data).

  Debug can be configured on the ./configure line - see ./configure --help.


* I do not take ANY compilation warnings lightly, and I'd hope you wouldn't 
  either. Please do not update to the cvs repository until the warning has 
  been resolved, unless it's minor and WILL be resolved later.


* If you update something that effects your system that could be
  operating system specific, make sure you update the autoconf files and
  confirm they work too (run 'make autoconf' in the top directory). Note
  that I am running autoconf 2.52, and you should also grab a copy from
  the gnu website if you're to edit this.


* C++ files are '.cpp', this is because the '.cpp' extension is more widely
  recognisable than the runner up '.cc' extension.


* In general, comment heavily! While this may seem stupid or a waste
  of time, one of the worse things that can happen is you look at your
  code at a later date (which may seem 100% straight forward now) and
  forget why something is done a specific way. Make sure the comment
  will help others and yourself at a later day

   eg. This is useless:
    foo(bah, baz, qux & 1);  // Call foo; Force bit 1 of qux to be set
    
   eg. This is better:
    foo(bah, baz, qux & 1);  // Call foo; Bit 1 must be set - bah is local


* Use C++ comments for one-liners (see above)


* Use standard C comments for multiple line comments. For neatness,
  follow the following style.
   eg.
    /* Call gettimeofday(); Note that the GNU implementation of this
     * does _not_ include the timezone structure and will fail if
     * anything but a null pointer is given to it - damn :(
     */


* Do not rush and ignore comments - Comments should be read all the
  time, and changed if necessary. Old, stale comments are obviously
  useless and a potential hinderance in the future. I will get cranky
  if comments are stale, and I expect you to get cranky with me if my
  comments are stale too!


* Top of the .h/.cpp files should be in this format:
     /* <cvs id thing>
      * <description>
      * [<optional warnings>]
      *
      * <License info>
      */
      
   eg.
     /* $Id$
      * Foo routines for the bar-baz engine
      */
  
  
* Always head up header files with an #ifndef to avoid conflicting
  reiterations cropping up in a compilation (yes, this is important!). Say
  the header file is include/kineircd/foo.h, you should wrap the code in this 
  manner:
  
   #ifndef _INCLUDE_KINEIRCD_FOO_H_
   # define _INCLUDE_KINEIRCD_FOO_H_
     <stuff>
   #endif


* Include header files we use with quotation marks, and system/library
  header files (external stuff we do not deal with) with right-angle brackets.
  Try to include the standard version of the header rather than the old
  non-standard header (eg. 'map' over 'map.h'):
   eg.
     #include <map>
     #include <openssl/openssl.h>
    but
     #include "kineircd/daemon.h"


* Following the head of the .cpp files, included files should be
  included in this order:
    1. kineircdconf.h
    2. system wide header files (C++ STYLE!!)
    3. Header file relating to the content of this file
    4. Other local header files.
   eg.
    #include "kineircd/kineircdconf.h"
    
    #include <cstdlib>
    #include <cerrno>
    #include <list>
    
    #include "kineircd/foo.h"
    #include "kineircd/str.h"
    #include "kineircd/user.h"
    #include "kineircd/server.h"
    #include "something.h"


* Explicitly specify braces/parenthesis for EVERYTHING.
   eg. Use:
   
    for (unsigned char i = 10; i--;) {
       foo(i, 10, 16);
    }
    
   rather than:
   
    for (unsigned char i = 10; i--;)
      foo(i, 10, 16);
   Also, use:
   
    if (((x == y) && (x > 12)) || !z) {
       // Stuff here
    }
    
   .. or if it's a long or overly complex logical statement, split it up:
   
    if ((((x == y) && (x > 12)) ||
         (!z && (z < 1234) && (((foo / fooMax) * 100) < 50))) &&
	((bar[0] != '\a') || ((baz ^ qux) & quux))) {
       // Rediculously hard to get to statement here :)
    }
    
  I have been accused of "over-using" my braces, but I believe it makes it
  especially easier to read, and easier to confirm an operation. Consider
  the following:
  
    if (x == y || x > 12 && !z || baz ^ qux & quux) {
       // Stuff.
    }
    
  The logic is less apparent and bloody hard to follow. Also consider this:
    if (x == y)
      if (x++) {
         // Stuff
      } else {
         // Other stuff..
      }
      
  Lucky for us, we know by the formatting that the else is attached to the
  if (x++) statement. Does the compiler? How dissimilar is the above to this:
  
    if (x == y)
      if (x++) {
         // Stuff
      }
    else {
       // Other stuff..
    }
    
  It's not - the compiler does not look at our formatting! Also it makes it
  easier in the future to quickly insert something, say an if-statement with
  one line of code in there, could be without set braces, but what if you
  wanted to quickly insert something there - you'd have to edit in the braces
  (something that annoys me if I have to bother with it and I'm in a rush,
   or doing a copy 'n' paste job for a debug() function..)


* Try to keep code within 80-columns. Naturally this cannot always be
  done, but try :) Remember you can extend character arrays:

    foo("This is an example of how you can extend "
        "data onto multiple lines easily");


* Until the ANSI-C++ committee make a decision on the definition of 'NULL',
  use '0' since the ANSI-C definition can be either '0' or '(void *)0'.
  Unfortunately there are compilers out there which do define it as '(void *)0'
  and this will cause issues.


* Don't check pointers with a simple if (!pointer). Do it with 
  if (pointer != 0) -- it's safer.


* Only use integers of the size you *NEED*. Leave word length
  optimisations, if any, to the compiler. Eg. 'int i' is a waste if
  you are only using a value between -3 and 3.


* Use unsigned if at all possible. Say you use a value between 0-20000,
  unsigned short would be most appropriate. Most systems handle unsigned
  integers faster than signed integers.


* Define functions *when you need them*. C++ allows for variables to be
  defined anywhere within the body, so USE IT! Note: this may require you to
  add hooks (set braces) within a switch's case statement to avoid compiler
  confusion. This is mainly a readability issue more than anything, but
  with newer compilers can allow for some optimisations.


* Start functions off with a multiline comment as a header. This is
  important! It is also just as important to use your cvs name. This
  is for readability, and also so you can get the credit :) Note that you
  are advised to skip this for small trivial functions, such as inline
  functions within header files or small functions in .cpp files. Please
  strictly follow this format:
    /* <function name> - <short description>
     * Original <date> <cvsname>
     * <date> <cvsname> - <modification details>
     * [Note: <notes/warnings>]
     * [Need: <what the function needs for completion>]
     */
     
  Note that the 'your name' field can either be your cvs name, or your
  real name. If it is not your cvs name, then you can optionally shove
  your cvs name in the 'cvsname' bit, but it's not necessary.
  Also, make sure the date is in DD/MM/YYYY format!!
  
   eg.
    /* foo - Process bah and baz using the parameters in the qux bitmask
     * Original 23/04/2000 simonb
     */
    void foo(int bah, int baz, unsigned short qux)
    {
       // Imagine code here.
    }
    
   eg. With a modification
    /* foo - Process bah and baz using the parameters in the qux bitmask
     * Original 23/04/2000 simonb
     * 03/01/01 scottm - Added sanity check on baz, should not be < -50
     */
     
   eg. With a note (I ran out of creativity here, hehe)
    /* foo - Process bah and baz using the parameters in the qux bitmask
     * Original 23/04/2000 simonb
     * 03/01/01 scottm - Added sanity check on baz, should not be < -50
     * Note: Bit 1 of qux must be set if foo is representing a local
     *       connection number.
     */
     
   If you are just placing an empty function/method in the code, or whatever
   is in the function is useless/temporary, you may omit the date:
   
    /* foo - Process bah and baz using the parameters in the qux bitmask
     * Original  simonb
     */


* If you make any extensions to the protocols, DOCUMENT IT! There is
  *no excuse* --  everything must be kept so that you don't have to go
  through the hell I did upon starting this. New numerics should go into
  the doc/New_Numerics file, new modes should go into doc/modes,
  modifications to version.cpp should go into doc/VersionChars.


* Just on numerics, check the irc2numerics.tpl file as it is the
  'ultimate' registry (compiled from other ircd's) for us. If you find another
  numeric from another ircd, ADD IT, and find out as much as you can
  about it incase it might be something we might like to implement.
  Before creating a new numeric, check if it has not already been done
  either in KineIRCd or another ircd. Make sure another numeric cannot
  simply be extended (RPL_ISUPPORT for example) to acheive the same
  effect. If you do add a new numeric, check it in all major clients 
  (ircII/epic, bitchx, mirc, etc). mirc especially has a LOT of bugs with 
  numerics, including numerics that are undefined that suddenly do things 
  like open up channel list boxes or crash the client. Try old and new 
  versions of mirc too. If you have ANY doubt, please contact me
  (pickle@alien.net.au) since I've spent quite some time (too much IMHO) 
  dealing with numeric conflicts.


* CVS is VERY important. It is not just a tool to keep the source code
  in sync with all the other developers, but it is also important to
  keep track of what is being done to the code, and also what can be
  undone. Update OFTEN, even if the edits are small -- once you have
  completed a section (eg. a function, or a bug fix) please update.
  Make sure you do the full 'cvs update' then 'cvs commit'. If you are
  new to CVS, don't be shy. Ask questions, or you'll do what I did and
  make a very bad embarrasing mistake. There's heaps of information on
  CVS out there, but there's also a heap of useless documentation that
  will confuse you more than anything.
  
  
* Before you update, 'make' the code. Make sure it compiles, make sure
  it runs, make sure whatever you did doesn't make the server die when
  it's run (by all permutations too, if possible). Make sure there
  aren't any warnings during compilation (see above re: compilation warnings)
  This will save other people time so that they will be able to keep 
  updating often and not have to work around or fix bugs they shouldn't have
  to fix.


* It is very highly recommended (read: People will get angry if you don't
  do this) that you are subscribed to the development list.
  CVS commits notifications and logs are sent there so that the entire 
  development team can be aware of the actions. Make sure you submit 
  detailed logs of your changes. Logs which are simplistic such as "fixed foo"
  are just as bad as simplistic code comments and should be avoided. 
  "Fixed foo -- slight oversight (-1 bug) that was causing clients 
  to be disconnected" is a much better explanation of what was going on, and 
  will help in future revision tracking.
  
  
* Do not code text or special values in directly at the source unless
  there is no other choice. Instead, to make it easier for future 
  updates, use defines or a tag in the languages text or another method 
  which allows it to be VERY easily updated by other developers, or if
  necessary for the users too.


* Alphabetical ordering of items in the Makefile and various tables,
  classes, source code etc in the source code is not a coincidence. It
  helps find/edit things faster in the code, and makes it look neater. I
  would hope that you would also place new items in alphabetical order
  with the other items too to help find things faster in the future. The
  only exception is that in the makefile the file lists are in
  alphabetical order except for the file containing the main() routine,
  which is specified last. If this didn't make sense, read the next
  point.
  
  
* If you're new to the code, READ it. You will not be given a task to do
  until you have read the code through and know how things are done.
  Even read the makefiles, headers, documentation. Ask questions, don't be
  shy. This is important, and if you don't you will make people angry when
  you stumble!


* Prematurely break loops if you can for optimisation reasons.
   eg.
    void foo(char const *bah) {
       for (int i = 1000; i--;) {
          switch (bah[i]) {
   	   case 'a':
	   case 'b':
	   case 'c':
	      baz(foo, i);
	      continue; // No need to run to the end only to jump back
	   case 'd':
	      return; // We are done here, no more checks needed
          }
       }
    }


* It's ok to leave out a 'default:' case in a switch if it is not necessary.
  (as with the above example)


* Write *EVERYTHING* in ENGLISH, not AMERICAN ENGLISH, nor any other language.
  This is because English is more standard and world-wide than American
  English, and if you're reading this now then you can obviously understand
  it! :) Naturally, language files for other languages are exempt from this
  else it would obviously negate the purpose..
    
    
* Please follow these naming conventions:
   * Class names should begin with a capital letter to differentiate them
     from other standards:
      eg. 
        class Foo;
	
   * Variable/Function names should begin with a lower case letter
      eg. 
        int foo;
	
   * With the exception for short run-on words (hostname, nickname etc),
     variables/class names with multiple words should have each new word
     start with a capital letter.
      eg.
        class FooBarBazQux;
        int fooBarBazQux;
	
   * Types should be all lower-case and end with the suffix '_type'. 
     The type should be descriptive if it defines something special, such
     as anything other than base types.
      eg.
       typedef unsigned short fooBar_type;
       typedef list <FooBahBazQux> quuxCorgeGraultList_type;
       
   * With the exception of simple utilitarian variables (int x, y, i, j etc
     for very local variables), variables and class names should be 
     descriptive! This is for self-documentation purposes. It also saves
     you writing a comment for something with is obvious.
      eg.
       string h; // this is totally useless, what is it?
       string hostname; // Much better, we know what this is instantly
       
   * Use typedefs rather than hard-coding in lists/maps whereever
     possible. This, and the point above, help write 'self-documented' 
     code which future developers (or just developers other than
     yourself) can understand without having to flick up and down the
     source code trying to work out WTF you're doing with these weird
     variables.


Functions:   
<return type> [<class name>::]<function name>(<param type> <param name>, ...)
{
   <code>;
}

Constructor:
<class name>::<class name>(<param type> <param name>, ...)
: <variable>(<init value>),
  <variable>(<init value>),
  ...
{
   <code>;
}

Structures:
struct [<name>] {
   <var type> <var name>;
   ...
} [<name>];
     
Enumerators:
enum [<name>] {
   <enum name> [= <value>],
   ...
} [<name>];

If-statements:
if (<expression>) {
   <code>;
} else if (<expression>) {
   <code>;
} else {
   <code>
}

While loop:
while (<expression>) {
   <code>;
}

Do-while loop:
do {
   <code>;
} while (<expression>);

For loop:
for (<init>; <condition>; <updater)) {
   <code>;
}

Switch:
switch (<expression>) {
 case <const variable>:
   <code>;
   break;
 case <const variable>:
   <code>;
   return;
 default:
   <code>;
}

Pre-processor commands (lines that start with #'s):
#ifndef <define name>
# define <define name> [<value>]
#endif
or
#ifdef <define name1>
# ifndef <define name2>
#  error "<reason>"
# else
#  undef <define name2>
#  define <define name2> [<value>]
# endif
#endif
etc etc.

____________________________________________________________________________
Information sources which will help you out:
 * CVS information: 
   http://www.cvshome.org/docs
   
 * Standard Template Library (STL) docs
   http://www.sgi.com/tech/stl
   
 * IRC RFCs.. (warning: most of this is useless crap)
   http://www.rfc-editor.org/rfc/rfc2810.txt (Architecture)
   http://www.rfc-editor.org/rfc/rfc2811.txt (Channel)
   http://www.rfc-editor.org/rfc/rfc2812.txt (Client)
   http://www.rfc-editor.org/rfc/rfc2813.txt (Server)
   http://www.rfc-editor.org/rfc/rfc1459.txt (Original from 1993)
