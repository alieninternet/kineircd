/* $Id$
 *
 * Copyright (c) 2002,2003,2004 Simon Butcher <pickle@alien.net.au>
 * Copyright (c) 2002,2003,2004 KineIRCd Development Team
 * (See DEV-TEAM file for details)
 *
 * This file is a part of KineIRCd.
 * 
 * KineIRCd is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * KineIRCd is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with KineIRCd; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
autogen definitions config;


/*****************************************************************************
 **                                                                         **
 **               Configuration data for the IRCd as a whole                **
 **                                                                         **
 *****************************************************************************/

definition = {
   name = "Administrator";
   comment = 
      "The Administrator section defines information about the person or "
      "organisation that administrates this server. Everything here is "
      "optional.";
   
   definition = {
      name = "Contact";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "\"unconfigured@server.foo.org\"";
      comment =
         "The contact address of the admin. This is normally an e-mail "
	 "address, or a URL to a website where contact information can be "
	 "found.";
   };
   
   definition = {
      name = "Location";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "\"Server located in Woop-Woop, NoWhereLand\"";
      comment =
         "This is the location of the server. Commonly it is only used to "
	 "specify that the server is located within a particular are of some "
	 "particular country. Sometimes, though, it is used to more directly "
	 "locate the server, such as a multi-campus university may want to "
	 "specify which campus the server is located at.";
   };
   
   definition = {
      name = "Name";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "Joe Bloggs";
      comment = 
         "The name of the administrator, or the name of the sponsor of the "
	 "server (i.e. a university or ISP)";
   };
};

definition = {
   name = "Arbiters";
   comment =
      "The list of arbitrators are needed on some networks for normal "
      "operation, such as networks with user services hosted as a single "
      "server. These define specific connections on the network which are "
      "allowed to bypass normal security restrictions, such as changing "
      "nicknames, modes, or spoofing identities for commands. They MUST "
      "be used cautiously, as anybody with the ability to access this "
      "capability (either themselves, or via their server) effectively has "
      "the ability to do a lot of damage on the network.";
   
   definition = {
      name = "Servers";
      comment =
         "Servers which are arbiters, or their users are arbiters.";
	 
      defaultDefinition = {
         exampleValue = "services.eu.somenetwork.org";
	 exampleValue = "services.us.somenetwork.org";
      };
   };
};

definition = {
   name = "IncludeOldConfig";
   condition = "KINE_OLD_CONFIG_SUBPARSER";
   varHandler = "varHandleOldConfig";
   hidden; // hidden because nobody is actively developing this, yet.
};

definition = {
   name = "Languages";
   comment =
      "The languages section defines files we need to load to obtain language "
      "data. The list is ordered from most preferred to least preferred, with "
      "the first language being the default language for all output.";
   
   defaultDefinition = {
      hasVariable;
      varHandler = "LanguageConfig::varHandler";
      exampleValue = "languages/*.lang";
   };
};
   
definition = {
   name = "Limits";
   comment =
      "Define limits on things. These should comply with network-wide "
      "settings. The use of large numbers here may result in cropped "
      "fields in some instances.";

   definition = {
      name = "Channels";
      comment =
	 "Limits for channels";

      definition = {
         name = "AllowMaskLikeNames";
         hasVariable;
         varType = "bool";
         varHandler = "varHandleBoolean";
         defaultValue = "false";
         comment =
	    "Set this if you wish to allow channel names to include mask "
	    "characters ('*' and '?') and still remain valid. This may "
	    "cause complications on some networks with network services, and "
	    "it is probably safer to keep mask characters disallowed, unless "
	    "you have a reason to allow them.";
      };
   
      definition = {
	 name = "MaxBans";
	 hasVariable;
         varType = "unsigned long";
	 varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "50";
	 comment =
	    "Maximum number of ban masks set at once per channel";
      };
	 
      definition = {
	 name = "MaxBanExceptions";
	 hasVariable;
         varType = "unsigned long";
	 varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "50";
	 comment =
	    "Maximum number of ban exception masks set at once per channel";
      };
	 
      definition = {
	 name = "MaxInviteExceptions";
	 hasVariable;
         varType = "unsigned long";
	 varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "50";
	 comment =
	    "Maximum number of invite-only exception masks set at once "
	    "pet channel";
      };
	 
      definition = {
	 name = "MaxNameLength";
	 hasVariable;
         varType = "unsigned short";
	 varHandler = "varHandleUnsignedShortNoZero";
	 defaultValue = "40";
	 comment =
	    "Maximum length of a channel name";
      };
	 
      definition = {
	 name = "MaxTopicLength";
	 hasVariable;
         varType = "unsigned short";
	 varHandler = "varHandleUnsignedShortNoZero";
	 defaultValue = "300";
	 comment =
	    "Maximum length of a channel's topic";
      };
   };
      
   definition = {
      name = "MaxKickReasonLength";
      hasVariable;
      varType = "unsigned short";
      varHandler = "varHandleUnsignedShortNoZero";
      defaultValue = "300";
      comment =
         "Maximum length of a KICK command's reason";
   };
      
   definition = {
      name = "MaxMessageLength";
      hasVariable;
      varType = "unsigned short";
      varHandler = "varHandleUnsignedShortNoZero";
      defaultValue = "400";
      comment =
         "Maximum length of a message (NOTICE/PRIVMSG payload size)";
   };
      
   definition = {
      name = "MaxTargets";
      hasVariable;
      varType = "unsigned char";
      varHandler = "varHandleUnsignedCharNoZero";
      defaultValue = "4";
      comment =
	 "Maximum number of targets possible to be specified for commands "
	 "such as PRIVMSG, NOTICE, etc.";
   };
      
   definition = {
      name = "MinBroadcastLength";
      hasVariable;
      varType = "unsigned short";
      varHandler = "varHandleUnsignedShort";
      defaultValue = "0";
      comment =
	 "Minimum length of a broadcasted message (WALLOPS, PRIVMSG "
	 "broadcasts, etc). This is designed to avoid abuse, or accidental "
	 "broadcasts of incomplete messages, as they are considered to be "
	 "both 'expensive' and 'annoying'. To disable imposing the limit, "
	 "simply comment this out or set this to 0.";
   };
      
   definition = {
      name = "Users";
      comment =
	 "Limits for users";

      definition = {
         name = "MaxAccepts";
         hasVariable;
         varType = "unsigned long"; 
         varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "100";
	 comment =
	    "Maximum number of accepts per user";
      };
	 
      definition = {
	 name = "MaxChannels";
	 hasVariable;
         varType = "unsigned long"; 
	 varHandler = "varHandleUnsignedLongNoZero";	
	 defaultValue = "10";
	 comment =
	    "Maximum number of channels a user can be in at once. This "
	    "may not apply to authenticated operators and/or staff.";
      };
	 
      definition = {
	 name = "MaxLanguages";
	 hasVariable;
         varType = "unsigned char";
	 varHandler = "varHandleUnsignedCharNoZero";
	 defaultValue = "6";
	 comment =
	    "Maximum languages set at once per user";
      };
	 
      definition = {
	 name = "MaxNickNameLength";
	 hasVariable;
         varType = "unsigned char"; 
	 varHandler = "varHandleUnsignedCharNoZero";
	 defaultValue = "9";
	 comment =
	    "Maximum length of a nickname";
      };
	 
      definition = {
	 name = "MaxRealNameLength";
	 hasVariable;
         varType = "unsigned char";
	 varHandler = "varHandleUnsignedCharNoZero";
	 defaultValue = "50";
	 comment =
	    "Maximum length of the realname/GECOS field for users";
      };
	 
      definition = {
	 name = "MaxSilences";
	 hasVariable;
         varType = "unsigned long"; 
	 varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "20";
	 comment =
            "Maximum number of silences per user";
      };
	 
      definition = {
	 name = "MaxWatches";
	 hasVariable;
         varType = "unsigned long"; 
	 varHandler = "varHandleUnsignedLongNoZero";
	 defaultValue = "128";
	 comment =
	    "Maximum number of nickname/channel/server watches per user";
      };
   };
   
   definition = {
      name = "Servers";
      comment =
	 "Limits for servers";
	 
      definition = {
	 name = "MaxDescriptionLength";
	 hasVariable;
         varType = "unsigned char";
	 varHandler = "varHandleUnsignedCharNoZero";
	 defaultValue = "50";
	 comment =
	    "Maximum length of the description field for servers";
      };
   };
};
   
definition = {
   name = "Listener";
   hasVariable;
   varType = "ListenerList";
   varTypeProtected = "ListenerList&";
   varPublicModify;
   variable = "ListenerList";
   classHandler = "ListenerConfig::classHandler";
   hidden; // for now..
};

definition = {
   name = "Module";
   hasVariable;
   varType = "ModuleList";
   variable = "ModuleList";
   varHandler = "varHandleModule";
   classHandler = "classHandleModule";
   hidden; // for now..
};
   
definition = {
   name = "Network";
   comment =
      "The network class defines connection to other servers, both incoming "
      "and outgoing.";
   
   definition = {
      name = "Name";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleNetworkName";
      exampleValue = "Unconfigured";
      comment =
         "This is the name of the network you are connecting this server to. "
	 "If you are not connecting it to a network, you can leave this blank "
	 "or comment it out entirely, and it will never appear anywhere. This "
	 "should be the same as every other server on the network, or clients "
	 "may get confused. Some server-to-server protocols may also reject "
	 "a connection based on a comparitive analysis of this value in order "
	 "to secure network integrity.";
   };
};
  
definition = {
   name = "Operators";
   comment =
      "The operators section defines who you allow to become an operator on "
      "your server, where they are allowed to connect and identify "
      "themselves from, their passwords, and a name or description. Be aware "
      "that if the network you are connecting to employs an arbiter server "
      "doing COM (Centralised Operator Management), these entries then may "
      "be disabled upon linking to the network, depending on the validity. "
      "Also be aware that the operator list may also grow, as operator "
      "information is proliferated over the network via the COM system. "
      "This isn't a bad thing, as the disabled entries are always enabled if "
      "the server is an island (i.e. totally delinked). This allows you to "
      "have your own 'emergancy operators' for the server, who only gain "
      "access to the server only when it may require 'desparate' "
      "reconnection. This, of course, depends on network policy too.";
};
   
definition = {
   name = "Options";
   comment =
      "This is the main options section. This is where the configuration "
      "settings for the daemon are kept.";

   definition = {
      name = "ChGroup";
      comment =
         "This defines the GID (group identity) to switch to after the "
	 "configuration has loaded.";
   };
   
   definition = {
      name = "ChRoot";
      comment =
         "Our chroot (change-root) gaol location. WARNING!! Do not set this "
	 "unless you have read all the documentation (doc/Security) on how "
	 "to do so. All file locations in the file WILL have to be "
	 "referenced under this directory as if it were /.";
   };
   
   definition = {
      name = "ChUser";    
      comment =
         "This defines the UID (user identity) to switch to after the "
	 "configuration has loaded.";
   };
   
   definition = {
      name = "EnableUsersCommand";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "Set this if you wish to allow users (connected to the server "
	 "via a virtual terminal of some description) to be visible via the "
	 "USERS command (or something similar).";
   };
   
   definition = {
      name = "MOTDFile";
//      hasVariable = "yes";
//      varType = "textBuffer_type";
      varType = "AIS::Util::String";
      exampleValue = "./ircd.motd";
      comment = 
         "Location of the MOTD file";
   };
   
   definition = {
      name = "PidFile";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "./ircd.pid";
      comment =
         "If you want to write a PID file (a file containing the PID number "
	 "of the daemon's process), then this is the file to use. The PID "
	 "number can be written to a file so that later on you may use it "
	 "in an external program (such as a shell script) for some purpose "
	 "such as a cron job to affirm the server's availability. If you do "
	 "not want a PID file to be written, simply comment this out, or "
	 "omit the file name.";
   };

   definition = {
      name = "WrapOperWallops";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "true";
      comment =
         "When enabled, IRC operator generated WALLOPS messages will be "
	 "wrapped (using the language tag 'Kine_OPER_WALLOPS_WRAPPER'). The "
	 "intention is to destinguish between informative WALLOPS messages "
	 "from IRC operators, and those generated by servers or special "
	 "services. This only effects IRC operators connected to this server.";
   };
};
 
definition = {
   name = "Redirection";
   hidden; // for now..

   definition = {
      name = "Channels";
   };
};
  
definition = {
   name = "Server";
   comment =
      "Configuration for ourself as a server";
   
   definition = {
      name = "Description";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      defaultValue = "\"Unconfigured server\"";
      comment =
         "This description appears in WHOIS messages, server listings etc.";
   };

   definition = {
      name = "Hidden";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "Setting this will hide your server from users";
   };
   
   definition = {
      name = "Name";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleHostName";
      defaultValue = "\"unconfigured.kineircd.server\"";
      comment =
         "This is the host name of your server";
   };
};


definition = {
   name = "SSL";
   hasVariable;
   varType = "SSL_CTX*";
   varTypeProtected = "const SSL_CTX* const";
   variable = "SSLContext";
   condition = "KINE_WITH_SSL";
   comment =
      "The SSL section specifically defines configuration data specific to "
      "'IRCS' - that is IRC through a Secure Socket Layer. Note that is is "
      "not the encryption of traffic which creates large amounts of CPU "
      "usage, but rather the key verification process which occurs only upon "
      "connection of an SSL socket. This common misconception comes from "
      "servers which use stateless connections such as HTTP. This section "
      "is not available if SSL support has not been compiled into your "
      "server.";
   
   definition = {
      name = "Certificate";
      comment =
         "This is the full path and filename of the certificate file that "
	 "identifies this server. This certificate must be signed by the "
	 "master certificate of the network if you wish to connect to other "
	 "servers via SSL, and must be kept secure! For those technically "
	 "interested, the type of certificate should be in 'PEM' (Base64 "
	 "Privacy Enhanced Mail encoded certificate) format, because it "
	 "seems to be the 'preferred' format, and is easier to transport.";
   };
};



/*****************************************************************************
 **                                                                         **
 **                Configuration data for mod_channellog                    **
 **                                                                         **
 *****************************************************************************/

module = {
   name = "mod_channellog";
   hasOptions;
   comment =
      "This is the channel logging module, used to send KineIRCd log messages "
      "to users within a pre-defined channel on IRC. It's designed primarily "
      "for remote administration and server debugging, since it can give IRC "
      "operators a complete view of what's happening within the server.";

   definition = {
      name = "Channel";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleStringOneWord";
      defaultValue = "\".serverlog\"";
      comment =
         "The soft-channel to create where users may join and receive "
	 "real-time server messages.";
   };
   
   definition = {
      name = "LogMask";
      hasVariable;
      varHandler = "varHandleLogMask";
      defaultValue = "everything";
      comment =
         "What do you want to be logged to the system log? See the man page "
	 "for information on log masks.";
   };
};



/*****************************************************************************
 **                                                                         **
 **                  Configuration data for mod_filelog                     **
 **                                                                         **
 *****************************************************************************/

module = {
   name = "mod_filelog";
   hasOptions;
   comment =
      "Load the file logging module. This is a simple logging mechanism, "
      "which sends log messages to the specified file (which can also be "
      "a device such as /dev/stdlog, if your system supports it). Output "
      "formats can be fine tuned, allowing you fit existing log file formats "
      "or use your own file format.";

   definition = {
      name = "Filename";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "\"kineircd.log\"";
      exampleValue = "\"/dev/stdlog\"";
      comment =
         "The filename to log to";
   };
   
   definition = {
      name = "Format";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleString";
      exampleValue = "\"%Y%m%dT%H%M%S %! %$%n\"";
      comment =
         "The format of everything logged. Characters prefixed with a '%' are"
	 "treated specially, as below. All other characters are copied "
	 " verbatim. The conversion specifiers are similar to those used by "
	 "the unix 'date' command, and are as follows: "
	 ""
	 " %$ - The log string"
	 " %! - The character corresponding with the item being logged"
	 " %# - The name of what is being logged"
	 " %@ - The name of what is being logged, in upper-case"
	 " %% - A percentage sign"
	 " %C - Century (2 digits)"
	 " %d - Day of the month (01 to 31)"
	 " %e - Same as above, but using a space for padding"
	 " %H - Hour (24-hour clock, 00 to 23)"
	 " %I - Hour (12-hour clock, 01 to 12)"
	 " %j - Day of the year (001 to 366)"
	 " %k - Same as %H but using space instead of zero as padding"
	 " %l - Same as %I but using space instead of zero as padding"
	 " %m - Month (01 to 12)"
	 " %M - Minute (00 to 59)"
	 " %n - A new-line"
	 " %p - 'AM' or 'PM', depending on the time of the day"
	 " %P - Lower-case version of %p ('am'/'pm')"
	 " %r - Equivalent to '%I:%M:%S %p'"
	 " %R - Equivalent to '%H:%M'"
	 " %s - Number of seconds since the 'Unix Epoch' (00:00:00 1/1/1970)"
	 " %S - Seconds (00 to 61, the extra seconds are leap seconds)"
	 " %t - A tab"
	 " %T - Equivalent to '%H:%M:%S'"
	 " %u - Number of the day in the week (1 to 7)"
	 " %w - Number of the day in the week (0 to 6)"
	 " %y - The year, without the century (00 to 99)"
	 " %Y - The year (1900 onwards)"
	 ""
	 "Any unrecognised conversion specifiers are ignored. Don't forget, "
	 "if you want each item logged to be on a separate line, you must "
	 "put '%n' at the end of the format string. The default format, "
	 "below, uses ISO-8601 style timestamps.";
   };
   
   definition = {
      name = "LogMask";
      hasVariable;
      varHandler = "varHandleLogMask";
      defaultValue = "everything";
      comment =
         "What do you want to be logged to the system log? See the man page "
	 "for information on log masks.";
   };

   definition = {
      name = "UTC";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "If you wish the time used in each log message's prefix to be in UTC "
	 "instead of your local time zone, enable this function. For this to "
	 "work properly, your local time zone must be set correctly.";
   };
};



/*****************************************************************************
 **                                                                         **
 **                Configuration data for mod_irc2registrar                 **
 **                                                                         **
 *****************************************************************************/

module = {
   name = "mod_irc2registrar";
   hasOptions;
   comment =
      "This is the IRC-2 registrar module, which will greet the majority "
      "(if not all) of your connections. It's required to handle users "
      "connecting with the IRC-2 protocol, and most server protocols. Once "
      "this module has determined which protocol the connection requires, it "
      "hands the connection over to a dedicated module for that protocol.";

   definition = {
      name = "PingProbeCount";
      hasVariable;
      varType = "unsigned char";
      varHandler = "varHandleUnsignedChar";
      defaultValue = "0";
      exampleValue = "1";
      comment =
	 "For validity checking, clients connection can be 'probed' to see "
	 "if they are cheap scripts or actually real clients. This is done "
	 "by sending a PING with random data attached. This can ween out "
	 "many unwanted connections (such as badly programmed clones or "
	 "spam-bots). Since many IRC Daemons do this PING probe now, many "
	 "scripts are ready for just one PING. To counter-act this, here we "
	 "allow you to configure the registrar to probe as many times as you "
	 "want to, if necessary. Comment this out, or set this to 0 if you "
	 "do not want to PING probe clients. Setting this to 1 "
	 "will mimic other servers.";
   };

   definition = {
      name = "PingProbeNotice";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "true";
      comment =
         "When anti-spoofing ping checks are enabled, turning this on will "
	 "send a notice to the user connecting to warn them about the check. "
	 "Ordinarily, this notice includes help for the user in case their "
	 "software doesn't work properly, so normally it's a good idea to "
	 "have this turned on. Having said that, though, most software "
	 "around these days will cope perfectly and this notice could be "
	 "considered redundant.";
   };

   definition = {
      name = "DefaultUserProtocol";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleStringOneWord";
      defaultValue = "\"IRC/2\"";
      hidden;
      comment =
	 "Default protocol to boot-strap into. Don't change this unless "
	 "you know what you're doing.";
   };
};



/*****************************************************************************
 **                                                                         **
 **                  Configuration data for mod_irc2user                    **
 **                                                                         **
 *****************************************************************************/

module = {
   name = "mod_irc2user";
   hasOptions;
   comment =
      "This is the IRC-2 user protocol module, which handles user "
      "connections handed to it from the IRC-2 registrar module. Since users "
      "are complex things, this module is fairly configurable to allow "
      "IRC server administrators to tweak their server to their market.";
      
   definition = {
      name = "AwayReturnsReason";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      exampleValue = "true";
      comment =
         "When enabled, this will return the reason given by the user back "
	 "to them for confirmation upon them setting AWAY. When disabled, "
	 "the normal behavior of simply stating that the user is now away "
	 "is observed.";
   };

   definition = {
      name = "ConnectionLUSERS";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "true";
      comment =
         "Simulate an LUSERS call upon connection to the server. There are "
	 "some older clients which rely on this behavior, but disabling it "
	 "will reduce traffic output from new connections.";
   };

   definition = {
      name = "ConnectionMOTD";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "Simulate an MOTD call upon connection to the server by sending the "
	 "MOTD to the user, or a small notice stating the user should be "
	 "aware of the MOTD (depending on the current server's mode "
	 "settings).";
   };

   definition = {
      name = "MaxMessageSizeDefault";
      hasVariable;
      varType = "unsigned short";
      varHandler = "varHandleUnsignedShortNoZero";
      defaultValue = "512";
      hidden;
      comment =
         "The default maximum message size used to be imposed on incoming and "
	 "outgoing protocol messages. This should not be changed unless there "
	 "is a very specific reason to do so, as the default (512) is "
	 "designed to conform to the old specifications. Lowering this may "
	 "cause clients to become confused, and raising this may cause "
	 "clients to crash.";
   };

   definition = {
      name = "MaxUserhostTargets";
      hasVariable;
      varType = "unsigned char";
      varHandler = "varHandleUnsignedCharNoZero";
      defaultValue = "5";
      hidden;
      comment =
	 "Maximum number of targets possible to be specified for the commands "
	 "USERHOST and USERIP. Normally this should not be changed.";
   };
      
   definition = {
      name = "MaxWhoReplies";
      hasVariable;
      varType = "unsigned short";
      varHandler = "varHandleUnsignedShort";
      defaultValue = "100";
      comment =
         "The maximum number of replies the WHO command will generate "
	 "before truncating and aborting the query. Normally clients using "
	 "the WHO command are not looking for an enormous responce, and the "
	 "WHO command is considered expensive. You can set this to a value of "
	 "'0' to let users receive untruncated replies. IRC Operators are not "
	 "effected by this limit.";
   };

   definition = {
      name = "MessageServices";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "When enabled, this will allow services to be sent messages via "
	 "PRIVMSG and NOTICE commands instead of just SQUERY, provided the "
	 "service can support it.";
   };

   definition = {
      name = "SendErrorOnQuit";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "true";
      hidden;
      comment =
         "Send an ERROR message to the client upon them using the QUIT "
	 "command. This is the normal behavior, but is not required as the "
	 "connection is dropped by the server with this enabled or disabled.";
   };

   definition = {
      name = "SendKillDone";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      exampleValue = "true";
      hidden;
      comment =
         "Send a 'kill done' numeric to an IRC Operator after a successful "
	 "KILL command was called. This message is considered to be obsolete "
	 "by IRC-2 standards, but may still be useful.";
   };
};



/*****************************************************************************
 **                                                                         **
 **                   Configuration data for mod_syslog                     **
 **                                                                         **
 *****************************************************************************/

module = {
   name = "mod_syslog";
   hasOptions;
   comment =
      "Load the syslog logging module, responsible for relaying KineIRCd log "
      "messages to the system's syslog logging daemon.";

   definition = {
      name = "ConsoleOutput";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      hidden;
      comment =
         "Enable this if you wish the syslog daemon to output the log to the "
	 "system console if for some reason the system logging facility is "
	 "unavailable. Normally this is strongly discouraged.";
   };

   definition = {
      name = "Identity";
      hasVariable;
      varType = "AIS::Util::String";
      varHandler = "varHandleStringOneWord";
      defaultValue = "kineircd";
      comment =
         "The process identity to log to the system log with. Normally the "
	 "default is sufficient, but some administrators may wish to use "
	 "this to identify the daemon specifically, such as when multiple "
	 "IRC daemons are running.";
   };

   definition = {
      name = "LogMask";
      hasVariable;
      varHandler = "varHandleLogMask";
      defaultValue = "everything";
      comment =
         "What do you want to be logged to the system log? See the man page "
	 "for information on log masks.";
   };

   definition = {
      name = "ShowPID";
      hasVariable;
      varType = "bool";
      varHandler = "varHandleBoolean";
      defaultValue = "false";
      comment =
         "Enable this if you want the Process ID (PID) of the daemon to be "
	 "sent to the syslog daemon. This is useful if you have multiple "
	 "copies of KineIRCd running on the same machine.";
   };
};
