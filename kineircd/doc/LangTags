
KineIRCd 'LangTags' engine
--------------------------

  The 'langtags' engine is KineIRCd's implementation of a relatively simple
 system for retrieval of text in a user's specified language or languages. It's
 primarily designed for use with the 'LANGUAGE' command, however it's flexible
 enough to be used for many other applications, using the KineIRCd core, and
 requiring language data to be given to an IRC user in their specified
 language.
 
  This document describes the engine from a translator's point of view, and
 currently doesn't provide any information useful for module developers.



File format
-----------

  Each line beginning with a '#' is considered a comment. The '#' character
 is allowed to have white-space preceeding it and still be considered a
 comment. Each line of data for the language engine is in the following
 simple format:
 
     tag = data

 eg.

     WORD = word
     WORD_PLURAL = words
     PHRASE = This is a phrase

  Each tag must be on a separate line, as text cannot span multiple lines. Tags
 are labeled in such a way to show their origin depending on their prefix. For
 example, KINE_FOO relates to KineIRCd in general, and IRC2USER_BAH relates to
 the irc2user protocol module.

  Tags not in the language engine's database are simply ignored to allow for
 backwards compatibility of the language data files. Tags that are present
 in the language engine but are not defined in this file will be resolved as
 a string containing a question mark ("?").

  Tags with the '.' prefix have a special purpose, such as an internal
 variable or instructions for the parser. Examples of these are '.REVISION',
 '.LANGNAME', '.PREFIX' etc.
 
  All tags are not case-sensitive, therefore 'foo', 'FOO', 'FoO' all are
 identified to the langtags engine as the same tag.
 
  Tags which get redefined will simply replace the previous definition, and as
 such multiple definitions are not possible.

  If multiple language files are loaded using the same language code, the data
 is merged. Any redefined tags will be overwritten, and previously undefined
 tags will be appended to the language data.



Editing language files
----------------------

  Since language files are to be written in UTF-8, they should be edited in an
 appropriate editor. Notepad for Windows XP has UTF-8 support, but is hopeless
 at providing the level of support required (and likes to mess around with the
 file in ugly ways).
 
  Ignore how the file is represented in most programs. Chances are, characters
 turn into all sorts of funny looking things purely because that program is
 incapable of supporting the UTF-8 character set, or presumes it's another
 character set (Windows Notepad makes such presumptions).
 
  My recommendation is to use UniRed. From what I've seen, it's stable. It
 doesn't fart around with the file format, and supports UTF-8 perfectly. You
 can download it from http://sf.net/projects/unired
 
  When using UniRed, that make sure when you open a language file you select
 "UTF-8" from the "Charset" drop-down box. Other Unicode/UTF-8 editors will
 have a similar requirement.



Why UTF-8?
----------

  UTF-8 is a type of Unicode encoding. Unicode is a special character set
 designed to be *the* character set to end all character sets. It is developed
 in parallel with the ISO-10646 character set (the two are practically the
 same project, since they're compatible). The ultimate goal of Unicode is to
 contains glyphs (letters and symbols) from all known written languages, along
 with symbols from various places (engineering, mathematics, sciences,
 international organisations, and so forth).
 
  Because of Unicode's power to incorporate virtually every language on the
 planet within the one character set, it's logical that anything which accepts
 connections internationally (such as IRC, or indeed the Internet itself)
 would want to use it for simplicity.
 
  Raw Unicode is encoded using a 32-bit number, allowing for over 4-billion
 glyphs. UTF-8 is a special way of encoding Unicode, which offers many
 advantages:
 
   * UTF-8 is backwards compatible with US-ASCII;
   
   * It doesn't require any string manipulation modifications for clients,
     which means old clients are automatically capable of remaining stable
     when receiving UTF-8 data they cannot deal with. UTF-16 and raw Unicode
     would break old clients;

   * While representing characters in the #4bn range requires 6-characters to
     encode, up to around a million glyphs can be encoded using 4-characters.
     There is no plan for more than that many glyphs at this stage, and most
     "common" characters can be encoded using 1-3 characters, which saves
     space;
     
   * UTF-8 is easy to interpret, and several libraries are already available.
     Most modern operating systems have at least some support for Unicode,
     and porting is usually an easy task;
     
   * UTF-8 is quickly becoming a "default format" for many systems, and many
     IRC developers from many different backgrounds all agree that UTF-8
     should become the standard for IRC, rather than implementing multiple
     character sets and complicating software.

  For more information, check out RFC 2279, or try a test page to see if your
 operating system is UTF-8 ready (such as http://www.slovo.info/testuni.htm)



Control tags
------------

  Various 'control tags' are defined. These control how the language file is
 parsed.


 .REVISION	(required)

    This is the 'version' of the language file. It must be a number, 
   without spaces or any special symbols. There is no specific format 
   defined for the number, however KineIRCd developers should remember that
   the number becomes a 32-bit integer. It's recommended to use the same
   format commonly used for DNS zone records - that is YYYYMMDDPP where
   YYYY = year, MM = month, DD = day, HH = hour, P = patch/modification level.
   
    eg. 20020823110


 .MAINTAINER	(optional)

    This is an e-mail address of who to contact regarding the language file.


 .LANGCODE	(required)
 
    This must be a registered language code as per BCP-0047. BCP-0047 includes
   language codes from a number of sources, but may have some limits, so it
   is advised that you read that document first prior to presuming a language
   code.

    For more information:
    
     * http://www.rfc-editor.org/rfc/bcp/bcp47.txt contains information about
       language codes used to identify languages on the internet. It also
       contains information on how to register specific dialects, and other
       such things.
       
     * http://www.iana.org/assignments/language-tags has a list of language
       codes for unique languages or language variations, as per BCP-0047.

     * http://www.loc.gov/standards/iso639-2/langcodes.html lists the ISO
       assigned language codes, however in order to remain compliant with
       BCP-0047 you must refer to the ISO-639-1 codes, and not ISO-639-2,
       as per the requirements set out in BCP-0047.


 .LANGNAME	(required)

    This is the name of the language in use, it should be the same as the
   name associated with the BCP-0047 or IANA Language Tags. The name of
   the language should be in it's own language, eg. 'English' in English,
   'Deutsch' in German etc.


 .LANGNOTE	(optional)

    Any additional notes you need. Keep this brief. This is intended to
   be used to supplement the language name (above). Eg. 'x-git' might be
   taken the wrong way and it might be worth stating in a note that the
   language is intended to be humourous.



Substitutions within tag data
-----------------------------
  
  Most characters are valid, escape for a few which may cause problems with
 some clients. These include the 'null' character (#0), vertical tab,
 backspace, form-feed, carrage return, new line, and the four data control
 characters (DC1-DC4). Horizontal tabs may cause problems with some clients,
 but shouldn't cause anything other than formatting issues.


    %p0 -> %p9	- Parameters, depending on the tag. (parameters 1..10)
    %P0 -> %P9	- More parameters, rarely used (parameters 11..20)
    %q0 -> %q9	- More parameters, rarely used (parameters 21..30)
    %Q0 -> %Q9	- More parameters, rarely used (parameters 31..40)
  
	%%	- A percentage sign
	%a	- The name of the server's administrator
	%A	- The contact point of the server's administrator (e-mail)
	%d	- The description of the server
	%L	- The location of the server
	%n	- The name of the server (its hostname)
	%N	- The name of the network

	\\	- A slash
       \nnn	- An escaped character. See above for valid characters.
        \b	- Toggle bold (same as \002)
	\c	- Beginning of colour sequence (mIRC form; Same as \003)
	\C	- Colour sequence (RGB form; Same as \004)
	\f	- Flash (only supported by some clients; same as \006)
	\g	- Beep (only supported by some clients; same as \007)
	\i	- Italics (only supported by some clients; same as \035)
	\n	- New section (only useful on tags used for multi-call output)
	\o	- Turn off/reset all text attributes (same as \017)
	\r	- Toggle reversed (same as \026)
	\s	- A space (same as \040 or ' ', used to force a space)
	\t	- A horizontal tab (not supported on all clients; same as \011)
	\u	- Toggle underline (same as \037)
